(()=>{"use strict";let a=[],b=0,c=400,d=540,e=[],f=0,g={KOOL:50,COOL:100,GOOD:150,MISS:200},h=()=>{let d=Date.now(),h=!1,i=null;a=a.map(a=>{if(a.isStuck)return a;let c=(d-a.thrownAt)/1e3,j=Math.min(1,c/.3);if(250-j*(2-j)*(250-b)<=b){let b=(a=>{if(0===e.length)return null;let b=null,c=1/0;for(let d of e){let e=a-d.time,f=Math.abs(e);f<=g.MISS&&f<c&&(c=f,b={note:d,timingError:e})}return b})(f);if(b){let a=(a=>{let b=Math.abs(a);return b<=g.KOOL?"KOOL":b<=g.COOL?"COOL":b<=g.GOOD?"GOOD":"MISS"})(b.timingError);i={hitTime:f/1e3,timingError:b.timingError,judgment:a,noteId:b.note.noteId,accuracy:Math.max(0,100-Math.abs(b.timingError)/g.MISS*100)},console.log(`[physics.worker] Hit judgment: ${a}, timing error: ${b.timingError}ms, game time: ${f}ms, accuracy: ${i.accuracy.toFixed(1)}%`)}else i={hitTime:f/1e3,timingError:999,judgment:"MISS",noteId:null,accuracy:0},console.log("[physics.worker] Hit but no note available - MISS, game time:",f);return h=!0,{...a,isStuck:!0,stuckAngle:90-d/1e3*120%360}}return a}).filter(a=>d-a.thrownAt<5e3),h&&i&&self.postMessage({type:"HIT",payload:i});let j=a.map(a=>({...a,position:(a=>{let d=Date.now(),e=(d-a.thrownAt)/1e3;if(a.isStuck){let c=d/1e3*120%360+a.stuckAngle,e=c*Math.PI/180,f=b+32-10,g=Math.cos(e)*f;return{x:g,y:Math.sin(e)*f,rotation:c+-90}}return{x:0,y:250-e*c,rotation:0}})(a)}));self.postMessage({type:"UPDATE",payload:{knives:j}})};self.onmessage=i=>{let{type:j,payload:k}=i.data;switch(console.log("[physics.worker] Received message:",j,k),j){case"INIT":b=k.targetRadius,c=k.velocity,d=k.rotationSpeed,console.log("[physics.worker] Initialized with:",{targetRadius:b,velocity:c,rotationSpeed:d}),setInterval(h,1e3/60);break;case"THROW":console.log("[physics.worker] Adding knife:",k.knife),a.push(k.knife);break;case"SET_NOTES":console.log("[physics.worker] Setting active notes:",k.notes.length),e=k.notes.map((a,b)=>({time:a.time,noteId:`note-${b}-${a.time}`}));break;case"SET_JUDGMENT_WINDOWS":console.log("[physics.worker] Setting judgment windows:",k.windows),g={...k.windows};break;case"UPDATE_GAME_TIME":f=k.gameTime;break;case"RESET":console.log("[physics.worker] Resetting knives and notes"),a=[],e=[],f=0}},module.exports={}})();