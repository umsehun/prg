(()=>{"use strict";let a=[],b=0,c=400,d=540,e=()=>{let d=Date.now(),e=!1;a=a.map(a=>{if(a.isStuck)return a;let c=(d-a.thrownAt)/1e3,f=Math.min(1,c/.3);return 250-f*(2-f)*(250-b)<=b?(e=!0,{...a,isStuck:!0,stuckAngle:90-d/1e3*120%360}):a}).filter(a=>d-a.thrownAt<5e3),e&&self.postMessage({type:"HIT",hitTime:d/1e3}),self.postMessage({type:"UPDATE",payload:{knives:a.map(a=>({...a,position:(a=>{let d=Date.now(),e=(d-a.thrownAt)/1e3;if(a.isStuck){let c=d/1e3*120%360+a.stuckAngle,e=c*Math.PI/180,f=b+32-10,g=Math.cos(e)*f;return{x:g,y:Math.sin(e)*f,rotation:c+-90}}return{x:0,y:250-e*c,rotation:0}})(a)}))}})};self.onmessage=f=>{let{type:g,payload:h}=f.data;switch(console.log("[physics.worker] Received message:",g,h),g){case"INIT":b=h.targetRadius,c=h.velocity,d=h.rotationSpeed,console.log("[physics.worker] Initialized with:",{targetRadius:b,velocity:c,rotationSpeed:d}),setInterval(e,1e3/60);break;case"THROW":console.log("[physics.worker] Adding knife:",h.knife),a.push(h.knife);break;case"RESET":console.log("[physics.worker] Resetting knives"),a=[]}},module.exports={}})();