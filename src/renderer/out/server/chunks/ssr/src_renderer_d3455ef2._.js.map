{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            \"rounded-xl border bg-card text-card-foreground shadow\",\n            className\n        )}\n        {...props}\n    />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n    />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EACT,yDACA;QAEH,GAAG,KAAK;;;;;;AAGjB,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAEvF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGjB,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAE,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAErF,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAElE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,8BAA8B;QAAa,GAAG,KAAK;;;;;;AAEpF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useSongs.ts"],"sourcesContent":["/**\n * useSongs Hook - Manages song library and OSZ files\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport type { SongData } from '../../shared/d.ts/ipc';\n\ninterface UseSongsReturn {\n    songs: SongData[];\n    loading: boolean;\n    error: string | null;\n    refreshLibrary: () => Promise<void>;\n    importOsz: (filePath: string) => Promise<boolean>;\n    getSong: (id: string) => SongData | undefined;\n    importFromFile: (file: File) => Promise<boolean>;\n}\n\nexport function useSongs(): UseSongsReturn {\n    const [songs, setSongs] = useState<SongData[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const refreshLibrary = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            if (typeof window !== 'undefined' && (window as any).electronAPI?.osz) {\n                const library = await (window as any).electronAPI.osz.getLibrary();\n                if (library && Array.isArray(library)) {\n                    setSongs(library);\n                } else {\n                    // 라이브러리가 비어있는 경우\n                    setSongs([]);\n                }\n            } else {\n                // Electron IPC를 사용할 수 없는 경우\n                console.warn('Electron IPC not available');\n                setSongs([]);\n                setError('Electron IPC를 사용할 수 없습니다');\n            }\n        } catch (err) {\n            console.error('Failed to load song library:', err);\n            setError('곡 라이브러리를 불러오는 데 실패했습니다');\n            setSongs([]);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    const importOsz = useCallback(async (filePath: string): Promise<boolean> => {\n        try {\n            setError(null);\n\n            if (typeof window !== 'undefined' && (window as any).electronAPI?.osz) {\n                const result = await (window as any).electronAPI.osz.importFromPath(filePath);\n\n                if (result.success) {\n                    // Refresh library after successful import\n                    await refreshLibrary();\n                    return true;\n                } else {\n                    setError(result.error || 'OSZ 파일 가져오기에 실패했습니다');\n                    return false;\n                }\n            } else {\n                setError('Electron IPC를 사용할 수 없습니다');\n                return false;\n            }\n        } catch (err) {\n            console.error('Failed to import OSZ:', err);\n            setError('OSZ 파일 가져오기 중 오류가 발생했습니다');\n            return false;\n        }\n    }, [refreshLibrary]);\n\n    const importFromFile = useCallback(async (file: File): Promise<boolean> => {\n        try {\n            setError(null);\n\n            if (typeof window !== 'undefined' && (window as any).electronAPI?.osz) {\n                // Convert File to buffer for IPC\n                const arrayBuffer = await file.arrayBuffer();\n                const buffer = new Uint8Array(arrayBuffer);\n\n                const result = await (window as any).electronAPI.osz.importFromBuffer({\n                    name: file.name,\n                    buffer: buffer\n                });\n\n                if (result.success) {\n                    // Refresh library after successful import\n                    await refreshLibrary();\n                    return true;\n                } else {\n                    setError(result.error || 'OSZ 파일 가져오기에 실패했습니다');\n                    return false;\n                }\n            } else {\n                setError('Electron IPC를 사용할 수 없습니다');\n                return false;\n            }\n        } catch (err) {\n            console.error('Failed to import file:', err);\n            setError('파일 가져오기 중 오류가 발생했습니다');\n            return false;\n        }\n    }, [refreshLibrary]);\n\n    const getSong = useCallback((id: string): SongData | undefined => {\n        return songs.find(song => song.id === id);\n    }, [songs]);\n\n    // Load songs on mount\n    useEffect(() => {\n        refreshLibrary();\n    }, [refreshLibrary]);\n\n    return {\n        songs,\n        loading,\n        error,\n        refreshLibrary,\n        importOsz,\n        getSong,\n        importFromFile,\n    };\n}\n\nexport default useSongs;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAID;AAFA;;AAeO,SAAS;IACZ,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAa,EAAE;IACjD,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAgB;IAElD,MAAM,iBAAiB,IAAA,oNAAW,EAAC;QAC/B,IAAI;YACA,WAAW;YACX,SAAS;YAET,IAAI,gBAAkB,eAAe,AAAC,OAAe,WAAW,EAAE;;iBAQ3D;gBACH,4BAA4B;gBAC5B,QAAQ,IAAI,CAAC;gBACb,SAAS,EAAE;gBACX,SAAS;YACb;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,SAAS;YACT,SAAS,EAAE;QACf,SAAU;YACN,WAAW;QACf;IACJ,GAAG,EAAE;IAEL,MAAM,YAAY,IAAA,oNAAW,EAAC,OAAO;QACjC,IAAI;YACA,SAAS;YAET,IAAI,gBAAkB,eAAe,AAAC,OAAe,WAAW,EAAE;;iBAW3D;gBACH,SAAS;gBACT,OAAO;YACX;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,yBAAyB;YACvC,SAAS;YACT,OAAO;QACX;IACJ,GAAG;QAAC;KAAe;IAEnB,MAAM,iBAAiB,IAAA,oNAAW,EAAC,OAAO;QACtC,IAAI;YACA,SAAS;YAET,IAAI,gBAAkB,eAAe,AAAC,OAAe,WAAW,EAAE;;iBAkB3D;gBACH,SAAS;gBACT,OAAO;YACX;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,0BAA0B;YACxC,SAAS;YACT,OAAO;QACX;IACJ,GAAG;QAAC;KAAe;IAEnB,MAAM,UAAU,IAAA,oNAAW,EAAC,CAAC;QACzB,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAC1C,GAAG;QAAC;KAAM;IAEV,sBAAsB;IACtB,IAAA,kNAAS,EAAC;QACN;IACJ,GAAG;QAAC;KAAe;IAEnB,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useGameState.ts"],"sourcesContent":["/**\n * useGameState Hook - Manages game state and controls\n */\n\n'use client';\n\nimport { useState, useCallback, useRef } from 'react';\nimport type { SongData, ScoreData } from '@shared/d.ts/ipc';\n\ntype GameMode = 'osu' | 'pin';\ntype GameState = 'idle' | 'loading' | 'playing' | 'paused' | 'finished';\n\ninterface GameStats {\n    score: number;\n    combo: number;\n    accuracy: number;\n    hits: {\n        perfect: number;\n        great: number;\n        good: number;\n        miss: number;\n    };\n}\n\ninterface UseGameStateReturn {\n    // State\n    currentSong: SongData | null;\n    gameMode: GameMode;\n    gameState: GameState;\n    stats: GameStats;\n    isPlaying: boolean;\n\n    // Controls\n    startGame: (song: SongData, mode: GameMode) => Promise<boolean>;\n    stopGame: () => Promise<void>;\n    pauseGame: () => Promise<void>;\n    resumeGame: () => Promise<void>;\n\n    // Score management\n    updateStats: (newStats: Partial<GameStats>) => void;\n    submitScore: () => Promise<boolean>;\n    resetStats: () => void;\n}\n\nexport function useGameState(): UseGameStateReturn {\n    const [currentSong, setCurrentSong] = useState<SongData | null>(null);\n    const [gameMode, setGameMode] = useState<GameMode>('osu'); // Default to osu mode\n    const [gameState, setGameState] = useState<GameState>('idle');\n    const [stats, setStats] = useState<GameStats>({\n        score: 0,\n        combo: 0,\n        accuracy: 100,\n        hits: {\n            perfect: 0,\n            great: 0,\n            good: 0,\n            miss: 0\n        }\n    });\n\n    const gameStartTime = useRef<number>(0);\n    const isPlaying = gameState === 'playing';\n\n    const startGame = useCallback(async (song: SongData, mode: GameMode): Promise<boolean> => {\n        try {\n            setGameState('loading');\n\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                const success = await window.electronAPI.game.start({\n                    songId: song.id,\n                    mode: mode,\n                    songData: song\n                });\n                if (success) {\n                    setCurrentSong(song);\n                    setGameMode(mode);\n                    setGameState('playing');\n                    gameStartTime.current = Date.now();\n                    resetStats();\n                    return true;\n                } else {\n                    setGameState('idle');\n                    return false;\n                }\n            } else {\n                // Fallback for development\n                console.warn('Electron IPC not available, starting mock game');\n                setCurrentSong(song);\n                setGameMode(mode);\n                setGameState('playing');\n                gameStartTime.current = Date.now();\n                resetStats();\n                return true;\n            }\n        } catch (error) {\n            console.error('Failed to start game:', error);\n            setGameState('idle');\n            return false;\n        }\n    }, []);\n\n    const stopGame = useCallback(async (): Promise<void> => {\n        try {\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                await window.electronAPI.game.stop();\n            }\n\n            setGameState('idle');\n            setCurrentSong(null);\n            setGameMode('pin'); // 기본값을 'pin'으로 설정\n        } catch (error) {\n            console.error('Failed to stop game:', error);\n        }\n    }, []);\n\n    const pauseGame = useCallback(async (): Promise<void> => {\n        try {\n            if (gameState === 'playing') {\n                if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                    await window.electronAPI.game.pause();\n                }\n                setGameState('paused');\n            }\n        } catch (error) {\n            console.error('Failed to pause game:', error);\n        }\n    }, [gameState]);\n\n    const resumeGame = useCallback(async (): Promise<void> => {\n        try {\n            if (gameState === 'paused') {\n                if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                    await window.electronAPI.game.resume();\n                }\n                setGameState('playing');\n            }\n        } catch (error) {\n            console.error('Failed to resume game:', error);\n        }\n    }, [gameState]);\n\n    const updateStats = useCallback((newStats: Partial<GameStats>) => {\n        setStats(prev => {\n            const updated = { ...prev, ...newStats };\n\n            // Calculate accuracy\n            const totalHits = updated.hits.perfect + updated.hits.great + updated.hits.good + updated.hits.miss;\n            if (totalHits > 0) {\n                const accurateHits = updated.hits.perfect + updated.hits.great + updated.hits.good;\n                updated.accuracy = Math.round((accurateHits / totalHits) * 100);\n            }\n\n            return updated;\n        });\n    }, []);\n\n    const submitScore = useCallback(async (): Promise<boolean> => {\n        try {\n            if (!currentSong || gameState !== 'finished') {\n                return false;\n            }\n\n            const scoreData: ScoreData = {\n                songId: currentSong.id,\n                score: stats.score,\n                accuracy: stats.accuracy,\n                combo: stats.combo,\n                rank: calculateRank(stats.accuracy),\n                timestamp: Date.now()\n            };\n\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                // submitScore가 없으면 임시로 true 반환\n                const gameAPI = window.electronAPI.game as any;\n                if (gameAPI.submitScore) {\n                    return await gameAPI.submitScore(scoreData);\n                } else {\n                    console.log('Score data prepared:', scoreData);\n                    return true;\n                }\n            } else {\n                // Mock submission for development\n                console.log('Mock score submission:', scoreData);\n                return true;\n            }\n        } catch (error) {\n            console.error('Failed to submit score:', error);\n            return false;\n        }\n    }, [currentSong, gameState, stats]);\n\n    const resetStats = useCallback(() => {\n        setStats({\n            score: 0,\n            combo: 0,\n            accuracy: 100,\n            hits: {\n                perfect: 0,\n                great: 0,\n                good: 0,\n                miss: 0\n            }\n        });\n    }, []);\n\n    return {\n        // State\n        currentSong,\n        gameMode,\n        gameState,\n        stats,\n        isPlaying,\n\n        // Controls\n        startGame,\n        stopGame,\n        pauseGame,\n        resumeGame,\n\n        // Score management\n        updateStats,\n        submitScore,\n        resetStats\n    };\n}\n\n// Helper function to calculate rank based on accuracy\nfunction calculateRank(accuracy: number): ScoreData['rank'] {\n    if (accuracy >= 97) return 'SS';\n    if (accuracy >= 90) return 'S';\n    if (accuracy >= 80) return 'A';\n    if (accuracy >= 70) return 'B';\n    if (accuracy >= 60) return 'C';\n    if (accuracy >= 50) return 'D';\n    return 'F';\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/app/play/page.tsx"],"sourcesContent":["/**\n * Play Page - Pin Mode Game Selection with Real Data\n */\n\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Target, Music, Clock, ArrowLeft } from 'lucide-react';\nimport { useSongs } from '@/hooks/useSongs';\nimport { useGameState } from '@/hooks/useGameState';\nimport Link from 'next/link';\n\nexport default function PlayPage() {\n    const { songs, loading } = useSongs();\n    const { startGame } = useGameState();\n    const [selectedSong, setSelectedSong] = useState<any>(null);\n\n    const handleSongSelect = (song: any) => {\n        setSelectedSong(song);\n    };\n\n    const startPinGame = async () => {\n        if (selectedSong) {\n            const success = await startGame(selectedSong, 'pin');\n            if (success) {\n                window.location.href = '/pin';\n            }\n        }\n    };\n\n    const formatDuration = (seconds: number) => {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    return (\n        <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-6 pt-20\">\n            <div className=\"max-w-6xl mx-auto\">\n                {/* Header */}\n                <div className=\"flex items-center gap-4 mb-8\">\n                    <Link href=\"/\">\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-300 hover:text-white\">\n                            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                            돌아가기\n                        </Button>\n                    </Link>\n                    <div>\n                        <h1 className=\"text-4xl font-bold text-white mb-2\">핀 모드</h1>\n                        <p className=\"text-slate-400 text-lg\">회전하는 타겟에 핀을 던지며 리듬을 즐기세요</p>\n                    </div>\n                </div>\n\n                {/* Pin Mode Info */}\n                <Card className=\"mb-8 bg-gradient-to-r from-purple-900/30 to-pink-900/30 border-purple-500/50\">\n                    <CardHeader>\n                        <div className=\"flex items-center gap-4\">\n                            <div className=\"w-16 h-16 rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center\">\n                                <Target className=\"w-8 h-8 text-white\" />\n                            </div>\n                            <div>\n                                <CardTitle className=\"text-white text-2xl\">핀 모드</CardTitle>\n                                <CardDescription className=\"text-purple-200 text-lg\">\n                                    회전하는 타겟에 핀을 던지며 리듬을 즐기는 게임플레이\n                                </CardDescription>\n                            </div>\n                        </div>\n                    </CardHeader>\n                </Card>\n\n                {/* Song Selection */}\n                <div className=\"mb-8\">\n                    <h2 className=\"text-2xl font-semibold text-white mb-4\">곡 선택</h2>\n\n                    {loading ? (\n                        <div className=\"text-center py-12\">\n                            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto\"></div>\n                            <p className=\"text-slate-400 mt-4\">곡 목록을 불러오는 중...</p>\n                        </div>\n                    ) : songs.length === 0 ? (\n                        <Card className=\"bg-slate-800/50 border-slate-700\">\n                            <CardContent className=\"py-12 text-center\">\n                                <Music className=\"w-16 h-16 text-slate-500 mx-auto mb-4\" />\n                                <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">곡이 없습니다</h3>\n                                <p className=\"text-slate-500 mb-6\">\n                                    .osz 파일을 가져와서 게임을 시작하세요\n                                </p>\n                                <Link href=\"/select\">\n                                    <Button className=\"bg-purple-500 hover:bg-purple-600\">\n                                        곡 라이브러리로 가기\n                                    </Button>\n                                </Link>\n                            </CardContent>\n                        </Card>\n                    ) : (\n                        <div className=\"grid gap-4\">\n                            {songs.map((song) => (\n                                <Card\n                                    key={song.id}\n                                    className={`cursor-pointer transition-all duration-300 ${selectedSong?.id === song.id\n                                        ? 'bg-purple-900/50 border-purple-500 shadow-lg shadow-purple-500/25'\n                                        : 'bg-slate-800/50 border-slate-700 hover:border-purple-500/50 hover:bg-slate-700/50'\n                                        }`}\n                                    onClick={() => handleSongSelect(song)}\n                                >\n                                    <CardContent className=\"p-6\">\n                                        <div className=\"flex items-center gap-6\">\n                                            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center flex-shrink-0\">\n                                                <Music className=\"w-8 h-8 text-white\" />\n                                            </div>\n\n                                            <div className=\"flex-1 min-w-0\">\n                                                <h3 className=\"text-xl font-semibold text-white mb-1 truncate\">\n                                                    {song.title}\n                                                </h3>\n                                                <p className=\"text-slate-400 mb-2 truncate\">\n                                                    {song.artist}\n                                                </p>\n\n                                                <div className=\"flex items-center gap-4 text-sm text-slate-500\">\n                                                    <div className=\"flex items-center gap-1\">\n                                                        <Clock className=\"w-4 h-4\" />\n                                                        {formatDuration(song.duration)}\n                                                    </div>\n                                                    <div>\n                                                        BPM: {song.bpm}\n                                                    </div>\n                                                    <div>\n                                                        난이도: ★{song.difficulty.easy}\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            {selectedSong?.id === song.id && (\n                                                <div className=\"flex-shrink-0\">\n                                                    <div className=\"w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center\">\n                                                        <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </CardContent>\n                                </Card>\n                            ))}\n                        </div>\n                    )}\n                </div>\n\n                {/* Start Game Button */}\n                {selectedSong && (\n                    <div className=\"text-center\">\n                        <Button\n                            size=\"lg\"\n                            className=\"bg-purple-500 hover:bg-purple-600 text-white px-12 py-4 text-lg\"\n                            onClick={startPinGame}\n                        >\n                            <Target className=\"w-6 h-6 mr-2\" />\n                            핀 모드 시작\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AAID;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AARA;;;;;;;;;AAUe,SAAS;IACpB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAA,gJAAQ;IACnC,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,wJAAY;IAClC,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAM;IAEtD,MAAM,mBAAmB,CAAC;QACtB,gBAAgB;IACpB;IAEA,MAAM,eAAe;QACjB,IAAI,cAAc;YACd,MAAM,UAAU,MAAM,UAAU,cAAc;YAC9C,IAAI,SAAS;gBACT,OAAO,QAAQ,CAAC,IAAI,GAAG;YAC3B;QACJ;IACJ;IAEA,MAAM,iBAAiB,CAAC;QACpB,MAAM,UAAU,KAAK,KAAK,CAAC,UAAU;QACrC,MAAM,mBAAmB,UAAU;QACnC,OAAO,GAAG,QAAQ,CAAC,EAAE,iBAAiB,QAAQ,GAAG,QAAQ,CAAC,GAAG,MAAM;IACvE;IAEA,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BAEX,8OAAC;oBAAI,WAAU;;sCACX,8OAAC,uKAAI;4BAAC,MAAK;sCACP,cAAA,8OAAC,wJAAM;gCAAC,SAAQ;gCAAQ,MAAK;gCAAK,WAAU;;kDACxC,8OAAC,6NAAS;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;sCAI9C,8OAAC;;8CACG,8OAAC;oCAAG,WAAU;8CAAqC;;;;;;8CACnD,8OAAC;oCAAE,WAAU;8CAAyB;;;;;;;;;;;;;;;;;;8BAK9C,8OAAC,oJAAI;oBAAC,WAAU;8BACZ,cAAA,8OAAC,0JAAU;kCACP,cAAA,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC,gNAAM;wCAAC,WAAU;;;;;;;;;;;8CAEtB,8OAAC;;sDACG,8OAAC,yJAAS;4CAAC,WAAU;sDAAsB;;;;;;sDAC3C,8OAAC,+JAAe;4CAAC,WAAU;sDAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BASrE,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAG,WAAU;sCAAyC;;;;;;wBAEtD,wBACG,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAI,WAAU;;;;;;8CACf,8OAAC;oCAAE,WAAU;8CAAsB;;;;;;;;;;;mCAEvC,MAAM,MAAM,KAAK,kBACjB,8OAAC,oJAAI;4BAAC,WAAU;sCACZ,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACnB,8OAAC,6MAAK;wCAAC,WAAU;;;;;;kDACjB,8OAAC;wCAAG,WAAU;kDAA4C;;;;;;kDAC1D,8OAAC;wCAAE,WAAU;kDAAsB;;;;;;kDAGnC,8OAAC,uKAAI;wCAAC,MAAK;kDACP,cAAA,8OAAC,wJAAM;4CAAC,WAAU;sDAAoC;;;;;;;;;;;;;;;;;;;;;iDAOlE,8OAAC;4BAAI,WAAU;sCACV,MAAM,GAAG,CAAC,CAAC,qBACR,8OAAC,oJAAI;oCAED,WAAW,CAAC,2CAA2C,EAAE,cAAc,OAAO,KAAK,EAAE,GAC/E,sEACA,qFACA;oCACN,SAAS,IAAM,iBAAiB;8CAEhC,cAAA,8OAAC,2JAAW;wCAAC,WAAU;kDACnB,cAAA,8OAAC;4CAAI,WAAU;;8DACX,8OAAC;oDAAI,WAAU;8DACX,cAAA,8OAAC,6MAAK;wDAAC,WAAU;;;;;;;;;;;8DAGrB,8OAAC;oDAAI,WAAU;;sEACX,8OAAC;4DAAG,WAAU;sEACT,KAAK,KAAK;;;;;;sEAEf,8OAAC;4DAAE,WAAU;sEACR,KAAK,MAAM;;;;;;sEAGhB,8OAAC;4DAAI,WAAU;;8EACX,8OAAC;oEAAI,WAAU;;sFACX,8OAAC,6MAAK;4EAAC,WAAU;;;;;;wEAChB,eAAe,KAAK,QAAQ;;;;;;;8EAEjC,8OAAC;;wEAAI;wEACK,KAAK,GAAG;;;;;;;8EAElB,8OAAC;;wEAAI;wEACM,KAAK,UAAU,CAAC,IAAI;;;;;;;;;;;;;;;;;;;gDAKtC,cAAc,OAAO,KAAK,EAAE,kBACzB,8OAAC;oDAAI,WAAU;8DACX,cAAA,8OAAC;wDAAI,WAAU;kEACX,cAAA,8OAAC;4DAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAtC9B,KAAK,EAAE;;;;;;;;;;;;;;;;gBAmD/B,8BACG,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC,wJAAM;wBACH,MAAK;wBACL,WAAU;wBACV,SAAS;;0CAET,8OAAC,gNAAM;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;;;;;;;;;;;AAQ/D","debugId":null}}]
}