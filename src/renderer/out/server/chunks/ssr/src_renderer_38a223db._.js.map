{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            \"rounded-xl border bg-card text-card-foreground shadow\",\n            className\n        )}\n        {...props}\n    />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n    />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EACT,yDACA;QAEH,GAAG,KAAK;;;;;;AAGjB,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAEvF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGjB,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAE,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAErF,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAElE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,8BAA8B;QAAa,GAAG,KAAK;;;;;;AAEpF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useGameState.ts"],"sourcesContent":["/**\n * useGameState Hook - Manages game state and controls\n */\n\n'use client';\n\nimport { useState, useCallback, useRef } from 'react';\nimport type { SongData, ScoreData } from '@/types/ipc';\n\ntype GameMode = 'osu' | 'pin';\ntype GameState = 'idle' | 'loading' | 'playing' | 'paused' | 'finished';\n\ninterface GameStats {\n  score: number;\n  combo: number;\n  accuracy: number;\n  hits: {\n    perfect: number;\n    great: number;\n    good: number;\n    miss: number;\n  };\n}\n\ninterface UseGameStateReturn {\n  // State\n  currentSong: SongData | null;\n  gameMode: GameMode | null;\n  gameState: GameState;\n  stats: GameStats;\n  isPlaying: boolean;\n  \n  // Controls\n  startGame: (song: SongData, mode: GameMode) => Promise<boolean>;\n  stopGame: () => Promise<void>;\n  pauseGame: () => Promise<void>;\n  resumeGame: () => Promise<void>;\n  \n  // Score management\n  updateStats: (newStats: Partial<GameStats>) => void;\n  submitScore: () => Promise<boolean>;\n  resetStats: () => void;\n}\n\nexport function useGameState(): UseGameStateReturn {\n  const [currentSong, setCurrentSong] = useState<SongData | null>(null);\n  const [gameMode, setGameMode] = useState<GameMode | null>(null);\n  const [gameState, setGameState] = useState<GameState>('idle');\n  const [stats, setStats] = useState<GameStats>({\n    score: 0,\n    combo: 0,\n    accuracy: 100,\n    hits: {\n      perfect: 0,\n      great: 0,\n      good: 0,\n      miss: 0\n    }\n  });\n\n  const gameStartTime = useRef<number>(0);\n  const isPlaying = gameState === 'playing';\n\n  const startGame = useCallback(async (song: SongData, mode: GameMode): Promise<boolean> => {\n    try {\n      setGameState('loading');\n      \n      if (typeof window !== 'undefined' && window.electronAPI?.game) {\n        const success = await window.electronAPI.game.start(song.id, mode);\n        if (success) {\n          setCurrentSong(song);\n          setGameMode(mode);\n          setGameState('playing');\n          gameStartTime.current = Date.now();\n          resetStats();\n          return true;\n        } else {\n          setGameState('idle');\n          return false;\n        }\n      } else {\n        // Fallback for development\n        console.warn('Electron IPC not available, starting mock game');\n        setCurrentSong(song);\n        setGameMode(mode);\n        setGameState('playing');\n        gameStartTime.current = Date.now();\n        resetStats();\n        return true;\n      }\n    } catch (error) {\n      console.error('Failed to start game:', error);\n      setGameState('idle');\n      return false;\n    }\n  }, []);\n\n  const stopGame = useCallback(async (): Promise<void> => {\n    try {\n      if (typeof window !== 'undefined' && window.electronAPI?.game) {\n        await window.electronAPI.game.stop();\n      }\n      \n      setGameState('idle');\n      setCurrentSong(null);\n      setGameMode(null);\n    } catch (error) {\n      console.error('Failed to stop game:', error);\n    }\n  }, []);\n\n  const pauseGame = useCallback(async (): Promise<void> => {\n    try {\n      if (gameState === 'playing') {\n        if (typeof window !== 'undefined' && window.electronAPI?.game) {\n          await window.electronAPI.game.pause();\n        }\n        setGameState('paused');\n      }\n    } catch (error) {\n      console.error('Failed to pause game:', error);\n    }\n  }, [gameState]);\n\n  const resumeGame = useCallback(async (): Promise<void> => {\n    try {\n      if (gameState === 'paused') {\n        if (typeof window !== 'undefined' && window.electronAPI?.game) {\n          await window.electronAPI.game.resume();\n        }\n        setGameState('playing');\n      }\n    } catch (error) {\n      console.error('Failed to resume game:', error);\n    }\n  }, [gameState]);\n\n  const updateStats = useCallback((newStats: Partial<GameStats>) => {\n    setStats(prev => {\n      const updated = { ...prev, ...newStats };\n      \n      // Calculate accuracy\n      const totalHits = updated.hits.perfect + updated.hits.great + updated.hits.good + updated.hits.miss;\n      if (totalHits > 0) {\n        const accurateHits = updated.hits.perfect + updated.hits.great + updated.hits.good;\n        updated.accuracy = Math.round((accurateHits / totalHits) * 100);\n      }\n      \n      return updated;\n    });\n  }, []);\n\n  const submitScore = useCallback(async (): Promise<boolean> => {\n    try {\n      if (!currentSong || gameState !== 'finished') {\n        return false;\n      }\n\n      const scoreData: ScoreData = {\n        songId: currentSong.id,\n        score: stats.score,\n        accuracy: stats.accuracy,\n        combo: stats.combo,\n        rank: calculateRank(stats.accuracy),\n        timestamp: Date.now()\n      };\n\n      if (typeof window !== 'undefined' && window.electronAPI?.game) {\n        return await window.electronAPI.game.submitScore(scoreData);\n      } else {\n        // Mock submission for development\n        console.log('Mock score submission:', scoreData);\n        return true;\n      }\n    } catch (error) {\n      console.error('Failed to submit score:', error);\n      return false;\n    }\n  }, [currentSong, gameState, stats]);\n\n  const resetStats = useCallback(() => {\n    setStats({\n      score: 0,\n      combo: 0,\n      accuracy: 100,\n      hits: {\n        perfect: 0,\n        great: 0,\n        good: 0,\n        miss: 0\n      }\n    });\n  }, []);\n\n  return {\n    // State\n    currentSong,\n    gameMode,\n    gameState,\n    stats,\n    isPlaying,\n    \n    // Controls\n    startGame,\n    stopGame,\n    pauseGame,\n    resumeGame,\n    \n    // Score management\n    updateStats,\n    submitScore,\n    resetStats\n  };\n}\n\n// Helper function to calculate rank based on accuracy\nfunction calculateRank(accuracy: number): ScoreData['rank'] {\n  if (accuracy >= 97) return 'SS';\n  if (accuracy >= 90) return 'S';\n  if (accuracy >= 80) return 'A';\n  if (accuracy >= 70) return 'B';\n  if (accuracy >= 60) return 'C';\n  if (accuracy >= 50) return 'D';\n  return 'F';\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/app/pin/page.tsx"],"sourcesContent":["/**\n * Pin Mode Page - Knife Hit Style Rhythm Game with Real Data\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Target, Pause, Play, Square, ArrowLeft, Zap } from 'lucide-react';\nimport { useGameState } from '@/hooks/useGameState';\nimport Link from 'next/link';\n\ninterface Pin {\n  id: number;\n  angle: number;\n  timestamp: number;\n}\n\nexport default function PinModePage() {\n  const { \n    currentSong, \n    gameState, \n    stats, \n    isPlaying, \n    pauseGame, \n    resumeGame, \n    stopGame,\n    updateStats\n  } = useGameState();\n  \n  const [targetRotation, setTargetRotation] = useState(0);\n  const [pins, setPins] = useState<Pin[]>([]);\n  const [rotationSpeed, setRotationSpeed] = useState(2);\n\n  // Rotation animation\n  useEffect(() => {\n    if (gameState === 'playing') {\n      const interval = setInterval(() => {\n        setTargetRotation(prev => (prev + rotationSpeed) % 360);\n      }, 16); // ~60fps\n      return () => clearInterval(interval);\n    }\n  }, [gameState, rotationSpeed]);\n\n  // Handle pin throwing\n  const handlePinThrow = useCallback(() => {\n    if (gameState === 'playing' && currentSong) {\n      const newPin: Pin = {\n        id: Date.now(),\n        angle: targetRotation,\n        timestamp: Date.now()\n      };\n      \n      setPins(prev => [...prev, newPin]);\n      \n      // Calculate score based on timing and accuracy\n      const baseScore = 100;\n      const comboBonus = stats.combo * 10;\n      const scoreIncrease = baseScore + comboBonus;\n      \n      // Update game stats\n      updateStats({\n        score: stats.score + scoreIncrease,\n        combo: stats.combo + 1,\n        hits: {\n          ...stats.hits,\n          perfect: stats.hits.perfect + 1\n        }\n      });\n      \n      // Gradually increase difficulty\n      if (stats.combo > 0 && stats.combo % 10 === 0) {\n        setRotationSpeed(prev => Math.min(prev + 0.2, 5));\n      }\n    }\n  }, [gameState, currentSong, targetRotation, stats, updateStats]);\n\n  // Keyboard controls\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (event.code === 'Space') {\n        event.preventDefault();\n        handlePinThrow();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handlePinThrow]);\n\n  const handlePause = () => {\n    if (gameState === 'playing') {\n      pauseGame();\n    } else if (gameState === 'paused') {\n      resumeGame();\n    }\n  };\n\n  const handleStop = () => {\n    stopGame();\n    setPins([]);\n    setTargetRotation(0);\n    setRotationSpeed(2);\n  };\n\n  // If no song is selected, show selection prompt\n  if (!currentSong) {\n    return (\n      <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 flex items-center justify-center\">\n        <Card className=\"bg-slate-800/50 border-slate-700 max-w-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <Target className=\"w-6 h-6\" />\n              Pin Mode\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center py-8\">\n            <div className=\"text-slate-400 mb-6\">\n              <Target className=\"w-24 h-24 mx-auto mb-4 opacity-50\" />\n              No song selected for Pin Mode\n            </div>\n            <p className=\"text-slate-300 mb-6\">\n              Select a song from the Play page to start the Pin Mode game.\n            </p>\n            <Link href=\"/play\">\n              <Button className=\"bg-purple-500 hover:bg-purple-600 text-white\">\n                Select Song\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/play\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-300 hover:text-white\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">{currentSong.title}</h1>\n              <p className=\"text-slate-400\">{currentSong.artist}</p>\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              onClick={handlePause}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-slate-600 text-slate-300\"\n              disabled={gameState === 'idle'}\n            >\n              {gameState === 'playing' ? (\n                <>\n                  <Pause className=\"w-4 h-4 mr-2\" />\n                  Pause\n                </>\n              ) : (\n                <>\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Resume\n                </>\n              )}\n            </Button>\n            <Button\n              onClick={handleStop}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-red-600 text-red-300 hover:bg-red-900/20\"\n              disabled={gameState === 'idle'}\n            >\n              <Square className=\"w-4 h-4 mr-2\" />\n              Stop\n            </Button>\n          </div>\n        </div>\n\n        {/* Score Display */}\n        <div className=\"grid grid-cols-3 gap-4 mb-8\">\n          <Card className=\"bg-slate-800/50 border-slate-700\">\n            <CardContent className=\"text-center py-4\">\n              <div className=\"text-3xl font-bold text-white mb-1\">{stats.score.toLocaleString()}</div>\n              <div className=\"text-slate-400 text-sm\">Score</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-slate-800/50 border-slate-700\">\n            <CardContent className=\"text-center py-4\">\n              <div className=\"text-3xl font-bold text-purple-400 mb-1\">{stats.combo}x</div>\n              <div className=\"text-slate-400 text-sm\">Combo</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-slate-800/50 border-slate-700\">\n            <CardContent className=\"text-center py-4\">\n              <div className=\"text-3xl font-bold text-green-400 mb-1\">{stats.accuracy}%</div>\n              <div className=\"text-slate-400 text-sm\">Accuracy</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Game Area */}\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Target Area */}\n          <div className=\"flex-1 flex flex-col items-center justify-center min-h-[500px]\">\n            <div className=\"relative\">\n              {/* Spinning Target */}\n              <div \n                className=\"w-80 h-80 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center shadow-2xl\"\n                style={{ \n                  transform: `rotate(${targetRotation}deg)`,\n                  transition: gameState === 'paused' ? 'none' : 'transform 0.016s linear'\n                }}\n              >\n                <div className=\"w-72 h-72 rounded-full bg-slate-900 flex items-center justify-center\">\n                  <Target className=\"w-32 h-32 text-white opacity-80\" />\n                </div>\n                \n                {/* Pins stuck in target */}\n                {pins.map((pin) => (\n                  <div\n                    key={pin.id}\n                    className=\"absolute w-1 h-8 bg-yellow-400 origin-bottom\"\n                    style={{\n                      transform: `rotate(${pin.angle}deg) translateY(-140px)`,\n                      transformOrigin: '50% 140px'\n                    }}\n                  />\n                ))}\n              </div>\n              \n              {/* Aim Line */}\n              <div className=\"absolute top-1/2 left-1/2 w-1 h-20 bg-red-500 transform -translate-x-1/2 -translate-y-full opacity-80\"></div>\n            </div>\n\n            {/* Throw Button */}\n            <Button\n              onClick={handlePinThrow}\n              disabled={gameState !== 'playing'}\n              className=\"mt-8 px-12 py-4 text-xl bg-purple-500 hover:bg-purple-600 text-white disabled:opacity-50\"\n            >\n              <Zap className=\"w-6 h-6 mr-2\" />\n              Throw Pin (Space)\n            </Button>\n          </div>\n\n          {/* Game Info */}\n          <div className=\"lg:w-80 space-y-4\">\n            <Card className=\"bg-slate-800/50 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white text-lg\">How to Play</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-slate-300 text-sm\">\n                <p>• Press SPACE or click \"Throw Pin\" to shoot pins</p>\n                <p>• Aim for the rotating target</p>\n                <p>• Build combo for higher scores</p>\n                <p>• Speed increases with combo!</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white text-lg\">Game Status</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-slate-300 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>State:</span>\n                  <span className={`font-medium ${\n                    gameState === 'playing' ? 'text-green-400' :\n                    gameState === 'paused' ? 'text-yellow-400' :\n                    'text-slate-400'\n                  }`}>\n                    {gameState.charAt(0).toUpperCase() + gameState.slice(1)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Speed:</span>\n                  <span className=\"text-purple-400\">{rotationSpeed.toFixed(1)}x</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Pins:</span>\n                  <span className=\"text-blue-400\">{pins.length}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AAID;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;;;;;;;;AAee,SAAS;IACtB,MAAM,EACJ,WAAW,EACX,SAAS,EACT,KAAK,EACL,SAAS,EACT,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACZ,GAAG,IAAA,wJAAY;IAEhB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,iNAAQ,EAAC;IACrD,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAQ,EAAE;IAC1C,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,iNAAQ,EAAC;IAEnD,qBAAqB;IACrB,IAAA,kNAAS,EAAC;QACR,IAAI,cAAc,WAAW;YAC3B,MAAM,WAAW,YAAY;gBAC3B,kBAAkB,CAAA,OAAQ,CAAC,OAAO,aAAa,IAAI;YACrD,GAAG,KAAK,SAAS;YACjB,OAAO,IAAM,cAAc;QAC7B;IACF,GAAG;QAAC;QAAW;KAAc;IAE7B,sBAAsB;IACtB,MAAM,iBAAiB,IAAA,oNAAW,EAAC;QACjC,IAAI,cAAc,aAAa,aAAa;YAC1C,MAAM,SAAc;gBAClB,IAAI,KAAK,GAAG;gBACZ,OAAO;gBACP,WAAW,KAAK,GAAG;YACrB;YAEA,QAAQ,CAAA,OAAQ;uBAAI;oBAAM;iBAAO;YAEjC,+CAA+C;YAC/C,MAAM,YAAY;YAClB,MAAM,aAAa,MAAM,KAAK,GAAG;YACjC,MAAM,gBAAgB,YAAY;YAElC,oBAAoB;YACpB,YAAY;gBACV,OAAO,MAAM,KAAK,GAAG;gBACrB,OAAO,MAAM,KAAK,GAAG;gBACrB,MAAM;oBACJ,GAAG,MAAM,IAAI;oBACb,SAAS,MAAM,IAAI,CAAC,OAAO,GAAG;gBAChC;YACF;YAEA,gCAAgC;YAChC,IAAI,MAAM,KAAK,GAAG,KAAK,MAAM,KAAK,GAAG,OAAO,GAAG;gBAC7C,iBAAiB,CAAA,OAAQ,KAAK,GAAG,CAAC,OAAO,KAAK;YAChD;QACF;IACF,GAAG;QAAC;QAAW;QAAa;QAAgB;QAAO;KAAY;IAE/D,oBAAoB;IACpB,IAAA,kNAAS,EAAC;QACR,MAAM,iBAAiB,CAAC;YACtB,IAAI,MAAM,IAAI,KAAK,SAAS;gBAC1B,MAAM,cAAc;gBACpB;YACF;QACF;QAEA,OAAO,gBAAgB,CAAC,WAAW;QACnC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACrD,GAAG;QAAC;KAAe;IAEnB,MAAM,cAAc;QAClB,IAAI,cAAc,WAAW;YAC3B;QACF,OAAO,IAAI,cAAc,UAAU;YACjC;QACF;IACF;IAEA,MAAM,aAAa;QACjB;QACA,QAAQ,EAAE;QACV,kBAAkB;QAClB,iBAAiB;IACnB;IAEA,gDAAgD;IAChD,IAAI,CAAC,aAAa;QAChB,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,oJAAI;gBAAC,WAAU;;kCACd,8OAAC,0JAAU;kCACT,cAAA,8OAAC,yJAAS;4BAAC,WAAU;;8CACnB,8OAAC,gNAAM;oCAAC,WAAU;;;;;;gCAAY;;;;;;;;;;;;kCAIlC,8OAAC,2JAAW;wBAAC,WAAU;;0CACrB,8OAAC;gCAAI,WAAU;;kDACb,8OAAC,gNAAM;wCAAC,WAAU;;;;;;oCAAsC;;;;;;;0CAG1D,8OAAC;gCAAE,WAAU;0CAAsB;;;;;;0CAGnC,8OAAC,uKAAI;gCAAC,MAAK;0CACT,cAAA,8OAAC,wJAAM;oCAAC,WAAU;8CAA+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQ7E;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BAEb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,uKAAI;oCAAC,MAAK;8CACT,cAAA,8OAAC,wJAAM;wCAAC,SAAQ;wCAAQ,MAAK;wCAAK,WAAU;;0DAC1C,8OAAC,6NAAS;gDAAC,WAAU;;;;;;4CAAiB;;;;;;;;;;;;8CAI1C,8OAAC;;sDACC,8OAAC;4CAAG,WAAU;sDAAiC,YAAY,KAAK;;;;;;sDAChE,8OAAC;4CAAE,WAAU;sDAAkB,YAAY,MAAM;;;;;;;;;;;;;;;;;;sCAKrD,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,wJAAM;oCACL,SAAS;oCACT,SAAQ;oCACR,MAAK;oCACL,WAAU;oCACV,UAAU,cAAc;8CAEvB,cAAc,0BACb;;0DACE,8OAAC,6MAAK;gDAAC,WAAU;;;;;;4CAAiB;;qEAIpC;;0DACE,8OAAC,0MAAI;gDAAC,WAAU;;;;;;4CAAiB;;;;;;;;8CAKvC,8OAAC,wJAAM;oCACL,SAAS;oCACT,SAAQ;oCACR,MAAK;oCACL,WAAU;oCACV,UAAU,cAAc;;sDAExB,8OAAC,gNAAM;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;8BAOzC,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,oJAAI;4BAAC,WAAU;sCACd,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACrB,8OAAC;wCAAI,WAAU;kDAAsC,MAAM,KAAK,CAAC,cAAc;;;;;;kDAC/E,8OAAC;wCAAI,WAAU;kDAAyB;;;;;;;;;;;;;;;;;sCAG5C,8OAAC,oJAAI;4BAAC,WAAU;sCACd,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACrB,8OAAC;wCAAI,WAAU;;4CAA2C,MAAM,KAAK;4CAAC;;;;;;;kDACtE,8OAAC;wCAAI,WAAU;kDAAyB;;;;;;;;;;;;;;;;;sCAG5C,8OAAC,oJAAI;4BAAC,WAAU;sCACd,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACrB,8OAAC;wCAAI,WAAU;;4CAA0C,MAAM,QAAQ;4CAAC;;;;;;;kDACxE,8OAAC;wCAAI,WAAU;kDAAyB;;;;;;;;;;;;;;;;;;;;;;;8BAM9C,8OAAC;oBAAI,WAAU;;sCAEb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;sDAEb,8OAAC;4CACC,WAAU;4CACV,OAAO;gDACL,WAAW,CAAC,OAAO,EAAE,eAAe,IAAI,CAAC;gDACzC,YAAY,cAAc,WAAW,SAAS;4CAChD;;8DAEA,8OAAC;oDAAI,WAAU;8DACb,cAAA,8OAAC,gNAAM;wDAAC,WAAU;;;;;;;;;;;gDAInB,KAAK,GAAG,CAAC,CAAC,oBACT,8OAAC;wDAEC,WAAU;wDACV,OAAO;4DACL,WAAW,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,uBAAuB,CAAC;4DACvD,iBAAiB;wDACnB;uDALK,IAAI,EAAE;;;;;;;;;;;sDAWjB,8OAAC;4CAAI,WAAU;;;;;;;;;;;;8CAIjB,8OAAC,wJAAM;oCACL,SAAS;oCACT,UAAU,cAAc;oCACxB,WAAU;;sDAEV,8OAAC,uMAAG;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAMpC,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,oJAAI;oCAAC,WAAU;;sDACd,8OAAC,0JAAU;sDACT,cAAA,8OAAC,yJAAS;gDAAC,WAAU;0DAAqB;;;;;;;;;;;sDAE5C,8OAAC,2JAAW;4CAAC,WAAU;;8DACrB,8OAAC;8DAAE;;;;;;8DACH,8OAAC;8DAAE;;;;;;8DACH,8OAAC;8DAAE;;;;;;8DACH,8OAAC;8DAAE;;;;;;;;;;;;;;;;;;8CAIP,8OAAC,oJAAI;oCAAC,WAAU;;sDACd,8OAAC,0JAAU;sDACT,cAAA,8OAAC,yJAAS;gDAAC,WAAU;0DAAqB;;;;;;;;;;;sDAE5C,8OAAC,2JAAW;4CAAC,WAAU;;8DACrB,8OAAC;oDAAI,WAAU;;sEACb,8OAAC;sEAAK;;;;;;sEACN,8OAAC;4DAAK,WAAW,CAAC,YAAY,EAC5B,cAAc,YAAY,mBAC1B,cAAc,WAAW,oBACzB,kBACA;sEACC,UAAU,MAAM,CAAC,GAAG,WAAW,KAAK,UAAU,KAAK,CAAC;;;;;;;;;;;;8DAGzD,8OAAC;oDAAI,WAAU;;sEACb,8OAAC;sEAAK;;;;;;sEACN,8OAAC;4DAAK,WAAU;;gEAAmB,cAAc,OAAO,CAAC;gEAAG;;;;;;;;;;;;;8DAE9D,8OAAC;oDAAI,WAAU;;sEACb,8OAAC;sEAAK;;;;;;sEACN,8OAAC;4DAAK,WAAU;sEAAiB,KAAK,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS9D","debugId":null}}]
}