{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            \"rounded-xl border bg-card text-card-foreground shadow\",\n            className\n        )}\n        {...props}\n    />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n    />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EACT,yDACA;QAEH,GAAG,KAAK;;;;;;AAGjB,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAEvF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGjB,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAE,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAErF,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAElE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,8BAA8B;QAAa,GAAG,KAAK;;;;;;AAEpF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useGameState.ts"],"sourcesContent":["/**\n * useGameState Hook - Manages game state and controls\n */\n\n'use client';\n\nimport { useState, useCallback, useRef } from 'react';\nimport type { SongData, ScoreData } from '@shared/d.ts/ipc';\n\ntype GameMode = 'osu' | 'pin';\ntype GameState = 'idle' | 'loading' | 'playing' | 'paused' | 'finished';\n\ninterface GameStats {\n    score: number;\n    combo: number;\n    accuracy: number;\n    hits: {\n        perfect: number;\n        great: number;\n        good: number;\n        miss: number;\n    };\n}\n\ninterface UseGameStateReturn {\n    // State\n    currentSong: SongData | null;\n    gameMode: GameMode;\n    gameState: GameState;\n    stats: GameStats;\n    isPlaying: boolean;\n\n    // Controls\n    startGame: (song: SongData, mode: GameMode) => Promise<boolean>;\n    stopGame: () => Promise<void>;\n    pauseGame: () => Promise<void>;\n    resumeGame: () => Promise<void>;\n\n    // Score management\n    updateStats: (newStats: Partial<GameStats>) => void;\n    submitScore: () => Promise<boolean>;\n    resetStats: () => void;\n}\n\nexport function useGameState(): UseGameStateReturn {\n    const [currentSong, setCurrentSong] = useState<SongData | null>(null);\n    const [gameMode, setGameMode] = useState<GameMode>('osu'); // Default to osu mode\n    const [gameState, setGameState] = useState<GameState>('idle');\n    const [stats, setStats] = useState<GameStats>({\n        score: 0,\n        combo: 0,\n        accuracy: 100,\n        hits: {\n            perfect: 0,\n            great: 0,\n            good: 0,\n            miss: 0\n        }\n    });\n\n    const gameStartTime = useRef<number>(0);\n    const isPlaying = gameState === 'playing';\n\n    const startGame = useCallback(async (song: SongData, mode: GameMode): Promise<boolean> => {\n        try {\n            setGameState('loading');\n\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                const success = await window.electronAPI.game.start({\n                    songId: song.id,\n                    mode: mode,\n                    songData: song\n                });\n                if (success) {\n                    setCurrentSong(song);\n                    setGameMode(mode);\n                    setGameState('playing');\n                    gameStartTime.current = Date.now();\n                    resetStats();\n                    return true;\n                } else {\n                    setGameState('idle');\n                    return false;\n                }\n            } else {\n                // Fallback for development\n                console.warn('Electron IPC not available, starting mock game');\n                setCurrentSong(song);\n                setGameMode(mode);\n                setGameState('playing');\n                gameStartTime.current = Date.now();\n                resetStats();\n                return true;\n            }\n        } catch (error) {\n            console.error('Failed to start game:', error);\n            setGameState('idle');\n            return false;\n        }\n    }, []);\n\n    const stopGame = useCallback(async (): Promise<void> => {\n        try {\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                await window.electronAPI.game.stop();\n            }\n\n            setGameState('idle');\n            setCurrentSong(null);\n            setGameMode(null);\n        } catch (error) {\n            console.error('Failed to stop game:', error);\n        }\n    }, []);\n\n    const pauseGame = useCallback(async (): Promise<void> => {\n        try {\n            if (gameState === 'playing') {\n                if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                    await window.electronAPI.game.pause();\n                }\n                setGameState('paused');\n            }\n        } catch (error) {\n            console.error('Failed to pause game:', error);\n        }\n    }, [gameState]);\n\n    const resumeGame = useCallback(async (): Promise<void> => {\n        try {\n            if (gameState === 'paused') {\n                if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                    await window.electronAPI.game.resume();\n                }\n                setGameState('playing');\n            }\n        } catch (error) {\n            console.error('Failed to resume game:', error);\n        }\n    }, [gameState]);\n\n    const updateStats = useCallback((newStats: Partial<GameStats>) => {\n        setStats(prev => {\n            const updated = { ...prev, ...newStats };\n\n            // Calculate accuracy\n            const totalHits = updated.hits.perfect + updated.hits.great + updated.hits.good + updated.hits.miss;\n            if (totalHits > 0) {\n                const accurateHits = updated.hits.perfect + updated.hits.great + updated.hits.good;\n                updated.accuracy = Math.round((accurateHits / totalHits) * 100);\n            }\n\n            return updated;\n        });\n    }, []);\n\n    const submitScore = useCallback(async (): Promise<boolean> => {\n        try {\n            if (!currentSong || gameState !== 'finished') {\n                return false;\n            }\n\n            const scoreData: ScoreData = {\n                songId: currentSong.id,\n                score: stats.score,\n                accuracy: stats.accuracy,\n                combo: stats.combo,\n                rank: calculateRank(stats.accuracy),\n                timestamp: Date.now()\n            };\n\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                return await window.electronAPI.game.submitScore(scoreData);\n            } else {\n                // Mock submission for development\n                console.log('Mock score submission:', scoreData);\n                return true;\n            }\n        } catch (error) {\n            console.error('Failed to submit score:', error);\n            return false;\n        }\n    }, [currentSong, gameState, stats]);\n\n    const resetStats = useCallback(() => {\n        setStats({\n            score: 0,\n            combo: 0,\n            accuracy: 100,\n            hits: {\n                perfect: 0,\n                great: 0,\n                good: 0,\n                miss: 0\n            }\n        });\n    }, []);\n\n    return {\n        // State\n        currentSong,\n        gameMode,\n        gameState,\n        stats,\n        isPlaying,\n\n        // Controls\n        startGame,\n        stopGame,\n        pauseGame,\n        resumeGame,\n\n        // Score management\n        updateStats,\n        submitScore,\n        resetStats\n    };\n}\n\n// Helper function to calculate rank based on accuracy\nfunction calculateRank(accuracy: number): ScoreData['rank'] {\n    if (accuracy >= 97) return 'SS';\n    if (accuracy >= 90) return 'S';\n    if (accuracy >= 80) return 'A';\n    if (accuracy >= 70) return 'B';\n    if (accuracy >= 60) return 'C';\n    if (accuracy >= 50) return 'D';\n    return 'F';\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/app/pin/page.tsx"],"sourcesContent":["/**\n * Pin Mode Page - Knife Hit Style Rhythm Game with Real Data\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Target, Pause, Play, Square, ArrowLeft, Zap } from 'lucide-react';\nimport { useGameState } from '@/hooks/useGameState';\nimport Link from 'next/link';\n\ninterface Pin {\n    id: number;\n    angle: number;\n    timestamp: number;\n}\n\nexport default function PinModePage() {\n    const {\n        currentSong,\n        gameState,\n        stats,\n        isPlaying,\n        pauseGame,\n        resumeGame,\n        stopGame,\n        updateStats\n    } = useGameState();\n\n    const [targetRotation, setTargetRotation] = useState(0);\n    const [pins, setPins] = useState<Pin[]>([]);\n    const [rotationSpeed, setRotationSpeed] = useState(2);\n\n    // Rotation animation\n    useEffect(() => {\n        if (gameState === 'playing') {\n            const interval = setInterval(() => {\n                setTargetRotation(prev => (prev + rotationSpeed) % 360);\n            }, 16); // ~60fps\n            return () => clearInterval(interval);\n        }\n    }, [gameState, rotationSpeed]);\n\n    // Handle pin throwing\n    const handlePinThrow = useCallback(() => {\n        if (gameState === 'playing' && currentSong) {\n            const newPin: Pin = {\n                id: Date.now(),\n                angle: targetRotation,\n                timestamp: Date.now()\n            };\n\n            setPins(prev => [...prev, newPin]);\n\n            // Calculate score based on timing and accuracy\n            const baseScore = 100;\n            const comboBonus = stats.combo * 10;\n            const scoreIncrease = baseScore + comboBonus;\n\n            // Update game stats\n            updateStats({\n                score: stats.score + scoreIncrease,\n                combo: stats.combo + 1,\n                hits: {\n                    ...stats.hits,\n                    perfect: stats.hits.perfect + 1\n                }\n            });\n\n            // Gradually increase difficulty\n            if (stats.combo > 0 && stats.combo % 10 === 0) {\n                setRotationSpeed(prev => Math.min(prev + 0.2, 5));\n            }\n        }\n    }, [gameState, currentSong, targetRotation, stats, updateStats]);\n\n    // Keyboard controls\n    useEffect(() => {\n        const handleKeyPress = (event: KeyboardEvent) => {\n            if (event.code === 'Space') {\n                event.preventDefault();\n                handlePinThrow();\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyPress);\n        return () => window.removeEventListener('keydown', handleKeyPress);\n    }, [handlePinThrow]);\n\n    const handlePause = () => {\n        if (gameState === 'playing') {\n            pauseGame();\n        } else if (gameState === 'paused') {\n            resumeGame();\n        }\n    };\n\n    const handleStop = () => {\n        stopGame();\n        setPins([]);\n        setTargetRotation(0);\n        setRotationSpeed(2);\n    };\n\n    // If no song is selected, show selection prompt\n    if (!currentSong) {\n        return (\n            <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 flex items-center justify-center\">\n                <Card className=\"bg-slate-800/50 border-slate-700 max-w-lg\">\n                    <CardHeader>\n                        <CardTitle className=\"text-white flex items-center gap-2\">\n                            <Target className=\"w-6 h-6\" />\n                            핀 모드\n                        </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-center py-8\">\n                        <div className=\"text-slate-400 mb-6\">\n                            <Target className=\"w-24 h-24 mx-auto mb-4 opacity-50\" />\n                            핀 모드에 선택된 곡이 없습니다\n                        </div>\n                        <p className=\"text-slate-300 mb-6\">\n                            플레이 페이지에서 곡을 선택하여 핀 모드 게임을 시작하세요.\n                        </p>\n                        <Link href=\"/play\">\n                            <Button className=\"bg-purple-500 hover:bg-purple-600 text-white\">\n                                곡 선택하기\n                            </Button>\n                        </Link>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-4 pt-20\">\n            <div className=\"max-w-6xl mx-auto\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-4\">\n                        <Link href=\"/play\">\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-300 hover:text-white\">\n                                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                                돌아가기\n                            </Button>\n                        </Link>\n                        <div>\n                            <h1 className=\"text-2xl font-bold text-white\">{currentSong.title}</h1>\n                            <p className=\"text-slate-400\">{currentSong.artist}</p>\n                        </div>\n                    </div>\n\n                    {/* Controls */}\n                    <div className=\"flex items-center gap-2\">\n                        <Button\n                            onClick={handlePause}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-slate-600 text-slate-300\"\n                            disabled={gameState === 'idle'}\n                        >\n                            {gameState === 'playing' ? (\n                                <>\n                                    <Pause className=\"w-4 h-4 mr-2\" />\n                                    Pause\n                                </>\n                            ) : (\n                                <>\n                                    <Play className=\"w-4 h-4 mr-2\" />\n                                    Resume\n                                </>\n                            )}\n                        </Button>\n                        <Button\n                            onClick={handleStop}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-red-600 text-red-300 hover:bg-red-900/20\"\n                            disabled={gameState === 'idle'}\n                        >\n                            <Square className=\"w-4 h-4 mr-2\" />\n                            정지\n                        </Button>\n                    </div>\n                </div>\n\n                {/* Score Display */}\n                <div className=\"grid grid-cols-3 gap-4 mb-8\">\n                    <Card className=\"bg-slate-800/50 border-slate-700\">\n                        <CardContent className=\"text-center py-4\">\n                            <div className=\"text-3xl font-bold text-white mb-1\">{stats.score.toLocaleString()}</div>\n                            <div className=\"text-slate-400 text-sm\">점수</div>\n                        </CardContent>\n                    </Card>\n                    <Card className=\"bg-slate-800/50 border-slate-700\">\n                        <CardContent className=\"text-center py-4\">\n                            <div className=\"text-3xl font-bold text-purple-400 mb-1\">{stats.combo}x</div>\n                            <div className=\"text-slate-400 text-sm\">콤보</div>\n                        </CardContent>\n                    </Card>\n                    <Card className=\"bg-slate-800/50 border-slate-700\">\n                        <CardContent className=\"text-center py-4\">\n                            <div className=\"text-3xl font-bold text-green-400 mb-1\">{stats.accuracy}%</div>\n                            <div className=\"text-slate-400 text-sm\">정확도</div>\n                        </CardContent>\n                    </Card>\n                </div>\n\n                {/* Game Area */}\n                <div className=\"flex flex-col lg:flex-row gap-8\">\n                    {/* Target Area */}\n                    <div className=\"flex-1 flex flex-col items-center justify-center min-h-[500px]\">\n                        <div className=\"relative\">\n                            {/* Spinning Target */}\n                            <div\n                                className=\"w-80 h-80 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center shadow-2xl\"\n                                style={{\n                                    transform: `rotate(${targetRotation}deg)`,\n                                    transition: gameState === 'paused' ? 'none' : 'transform 0.016s linear'\n                                }}\n                            >\n                                <div className=\"w-72 h-72 rounded-full bg-slate-900 flex items-center justify-center\">\n                                    <Target className=\"w-32 h-32 text-white opacity-80\" />\n                                </div>\n\n                                {/* Pins stuck in target */}\n                                {pins.map((pin) => (\n                                    <div\n                                        key={pin.id}\n                                        className=\"absolute w-1 h-8 bg-yellow-400 origin-bottom\"\n                                        style={{\n                                            transform: `rotate(${pin.angle}deg) translateY(-140px)`,\n                                            transformOrigin: '50% 140px'\n                                        }}\n                                    />\n                                ))}\n                            </div>\n\n                            {/* Aim Line */}\n                            <div className=\"absolute top-1/2 left-1/2 w-1 h-20 bg-red-500 transform -translate-x-1/2 -translate-y-full opacity-80\"></div>\n                        </div>\n\n                        {/* Throw Button */}\n                        <Button\n                            onClick={handlePinThrow}\n                            disabled={gameState !== 'playing'}\n                            className=\"mt-8 px-12 py-4 text-xl bg-purple-500 hover:bg-purple-600 text-white disabled:opacity-50\"\n                        >\n                            <Zap className=\"w-6 h-6 mr-2\" />\n                            핀 던지기 (스페이스)\n                        </Button>\n                    </div>\n\n                    {/* Game Info */}\n                    <div className=\"lg:w-80 space-y-4\">\n                        <Card className=\"bg-slate-800/50 border-slate-700\">\n                            <CardHeader>\n                                <CardTitle className=\"text-white text-lg\">게임 방법</CardTitle>\n                            </CardHeader>\n                            <CardContent className=\"space-y-2 text-slate-300 text-sm\">\n                                <p>• 스페이스 키 또는 \"핀 던지기\" 버튼을 눌러 핀을 발사하세요</p>\n                                <p>• 회전하는 타겟을 조준하세요</p>\n                                <p>• 콤보를 쌓아 더 높은 점수를 획득하세요</p>\n                                <p>• 콤보가 증가할수록 속도가 빨라집니다!</p>\n                            </CardContent>\n                        </Card>\n\n                        <Card className=\"bg-slate-800/50 border-slate-700\">\n                            <CardHeader>\n                                <CardTitle className=\"text-white text-lg\">게임 상태</CardTitle>\n                            </CardHeader>\n                            <CardContent className=\"space-y-2 text-slate-300 text-sm\">\n                                <div className=\"flex justify-between\">\n                                    <span>상태:</span>\n                                    <span className={`font-medium ${gameState === 'playing' ? 'text-green-400' :\n                                        gameState === 'paused' ? 'text-yellow-400' :\n                                            'text-slate-400'\n                                        }`}>\n                                        {gameState === 'playing' ? '플레이 중' :\n                                         gameState === 'paused' ? '일시정지' :\n                                         gameState === 'idle' ? '대기' : gameState}\n                                    </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                    <span>속도:</span>\n                                    <span className=\"text-purple-400\">{rotationSpeed.toFixed(1)}x</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                    <span>핀 개수:</span>\n                                    <span className=\"text-blue-400\">{pins.length}</span>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AAID;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;;;;;;;;AAee,SAAS;IACpB,MAAM,EACF,WAAW,EACX,SAAS,EACT,KAAK,EACL,SAAS,EACT,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACd,GAAG,IAAA,wJAAY;IAEhB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,iNAAQ,EAAC;IACrD,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAQ,EAAE;IAC1C,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,iNAAQ,EAAC;IAEnD,qBAAqB;IACrB,IAAA,kNAAS,EAAC;QACN,IAAI,cAAc,WAAW;YACzB,MAAM,WAAW,YAAY;gBACzB,kBAAkB,CAAA,OAAQ,CAAC,OAAO,aAAa,IAAI;YACvD,GAAG,KAAK,SAAS;YACjB,OAAO,IAAM,cAAc;QAC/B;IACJ,GAAG;QAAC;QAAW;KAAc;IAE7B,sBAAsB;IACtB,MAAM,iBAAiB,IAAA,oNAAW,EAAC;QAC/B,IAAI,cAAc,aAAa,aAAa;YACxC,MAAM,SAAc;gBAChB,IAAI,KAAK,GAAG;gBACZ,OAAO;gBACP,WAAW,KAAK,GAAG;YACvB;YAEA,QAAQ,CAAA,OAAQ;uBAAI;oBAAM;iBAAO;YAEjC,+CAA+C;YAC/C,MAAM,YAAY;YAClB,MAAM,aAAa,MAAM,KAAK,GAAG;YACjC,MAAM,gBAAgB,YAAY;YAElC,oBAAoB;YACpB,YAAY;gBACR,OAAO,MAAM,KAAK,GAAG;gBACrB,OAAO,MAAM,KAAK,GAAG;gBACrB,MAAM;oBACF,GAAG,MAAM,IAAI;oBACb,SAAS,MAAM,IAAI,CAAC,OAAO,GAAG;gBAClC;YACJ;YAEA,gCAAgC;YAChC,IAAI,MAAM,KAAK,GAAG,KAAK,MAAM,KAAK,GAAG,OAAO,GAAG;gBAC3C,iBAAiB,CAAA,OAAQ,KAAK,GAAG,CAAC,OAAO,KAAK;YAClD;QACJ;IACJ,GAAG;QAAC;QAAW;QAAa;QAAgB;QAAO;KAAY;IAE/D,oBAAoB;IACpB,IAAA,kNAAS,EAAC;QACN,MAAM,iBAAiB,CAAC;YACpB,IAAI,MAAM,IAAI,KAAK,SAAS;gBACxB,MAAM,cAAc;gBACpB;YACJ;QACJ;QAEA,OAAO,gBAAgB,CAAC,WAAW;QACnC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACvD,GAAG;QAAC;KAAe;IAEnB,MAAM,cAAc;QAChB,IAAI,cAAc,WAAW;YACzB;QACJ,OAAO,IAAI,cAAc,UAAU;YAC/B;QACJ;IACJ;IAEA,MAAM,aAAa;QACf;QACA,QAAQ,EAAE;QACV,kBAAkB;QAClB,iBAAiB;IACrB;IAEA,gDAAgD;IAChD,IAAI,CAAC,aAAa;QACd,qBACI,8OAAC;YAAI,WAAU;sBACX,cAAA,8OAAC,oJAAI;gBAAC,WAAU;;kCACZ,8OAAC,0JAAU;kCACP,cAAA,8OAAC,yJAAS;4BAAC,WAAU;;8CACjB,8OAAC,gNAAM;oCAAC,WAAU;;;;;;gCAAY;;;;;;;;;;;;kCAItC,8OAAC,2JAAW;wBAAC,WAAU;;0CACnB,8OAAC;gCAAI,WAAU;;kDACX,8OAAC,gNAAM;wCAAC,WAAU;;;;;;oCAAsC;;;;;;;0CAG5D,8OAAC;gCAAE,WAAU;0CAAsB;;;;;;0CAGnC,8OAAC,uKAAI;gCAAC,MAAK;0CACP,cAAA,8OAAC,wJAAM;oCAAC,WAAU;8CAA+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQzF;IAEA,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BAEX,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAI,WAAU;;8CACX,8OAAC,uKAAI;oCAAC,MAAK;8CACP,cAAA,8OAAC,wJAAM;wCAAC,SAAQ;wCAAQ,MAAK;wCAAK,WAAU;;0DACxC,8OAAC,6NAAS;gDAAC,WAAU;;;;;;4CAAiB;;;;;;;;;;;;8CAI9C,8OAAC;;sDACG,8OAAC;4CAAG,WAAU;sDAAiC,YAAY,KAAK;;;;;;sDAChE,8OAAC;4CAAE,WAAU;sDAAkB,YAAY,MAAM;;;;;;;;;;;;;;;;;;sCAKzD,8OAAC;4BAAI,WAAU;;8CACX,8OAAC,wJAAM;oCACH,SAAS;oCACT,SAAQ;oCACR,MAAK;oCACL,WAAU;oCACV,UAAU,cAAc;8CAEvB,cAAc,0BACX;;0DACI,8OAAC,6MAAK;gDAAC,WAAU;;;;;;4CAAiB;;qEAItC;;0DACI,8OAAC,0MAAI;gDAAC,WAAU;;;;;;4CAAiB;;;;;;;;8CAK7C,8OAAC,wJAAM;oCACH,SAAS;oCACT,SAAQ;oCACR,MAAK;oCACL,WAAU;oCACV,UAAU,cAAc;;sDAExB,8OAAC,gNAAM;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;8BAO/C,8OAAC;oBAAI,WAAU;;sCACX,8OAAC,oJAAI;4BAAC,WAAU;sCACZ,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACnB,8OAAC;wCAAI,WAAU;kDAAsC,MAAM,KAAK,CAAC,cAAc;;;;;;kDAC/E,8OAAC;wCAAI,WAAU;kDAAyB;;;;;;;;;;;;;;;;;sCAGhD,8OAAC,oJAAI;4BAAC,WAAU;sCACZ,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACnB,8OAAC;wCAAI,WAAU;;4CAA2C,MAAM,KAAK;4CAAC;;;;;;;kDACtE,8OAAC;wCAAI,WAAU;kDAAyB;;;;;;;;;;;;;;;;;sCAGhD,8OAAC,oJAAI;4BAAC,WAAU;sCACZ,cAAA,8OAAC,2JAAW;gCAAC,WAAU;;kDACnB,8OAAC;wCAAI,WAAU;;4CAA0C,MAAM,QAAQ;4CAAC;;;;;;;kDACxE,8OAAC;wCAAI,WAAU;kDAAyB;;;;;;;;;;;;;;;;;;;;;;;8BAMpD,8OAAC;oBAAI,WAAU;;sCAEX,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAI,WAAU;;sDAEX,8OAAC;4CACG,WAAU;4CACV,OAAO;gDACH,WAAW,CAAC,OAAO,EAAE,eAAe,IAAI,CAAC;gDACzC,YAAY,cAAc,WAAW,SAAS;4CAClD;;8DAEA,8OAAC;oDAAI,WAAU;8DACX,cAAA,8OAAC,gNAAM;wDAAC,WAAU;;;;;;;;;;;gDAIrB,KAAK,GAAG,CAAC,CAAC,oBACP,8OAAC;wDAEG,WAAU;wDACV,OAAO;4DACH,WAAW,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,uBAAuB,CAAC;4DACvD,iBAAiB;wDACrB;uDALK,IAAI,EAAE;;;;;;;;;;;sDAWvB,8OAAC;4CAAI,WAAU;;;;;;;;;;;;8CAInB,8OAAC,wJAAM;oCACH,SAAS;oCACT,UAAU,cAAc;oCACxB,WAAU;;sDAEV,8OAAC,uMAAG;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;sCAMxC,8OAAC;4BAAI,WAAU;;8CACX,8OAAC,oJAAI;oCAAC,WAAU;;sDACZ,8OAAC,0JAAU;sDACP,cAAA,8OAAC,yJAAS;gDAAC,WAAU;0DAAqB;;;;;;;;;;;sDAE9C,8OAAC,2JAAW;4CAAC,WAAU;;8DACnB,8OAAC;8DAAE;;;;;;8DACH,8OAAC;8DAAE;;;;;;8DACH,8OAAC;8DAAE;;;;;;8DACH,8OAAC;8DAAE;;;;;;;;;;;;;;;;;;8CAIX,8OAAC,oJAAI;oCAAC,WAAU;;sDACZ,8OAAC,0JAAU;sDACP,cAAA,8OAAC,yJAAS;gDAAC,WAAU;0DAAqB;;;;;;;;;;;sDAE9C,8OAAC,2JAAW;4CAAC,WAAU;;8DACnB,8OAAC;oDAAI,WAAU;;sEACX,8OAAC;sEAAK;;;;;;sEACN,8OAAC;4DAAK,WAAW,CAAC,YAAY,EAAE,cAAc,YAAY,mBACtD,cAAc,WAAW,oBACrB,kBACF;sEACD,cAAc,YAAY,UAC1B,cAAc,WAAW,SACzB,cAAc,SAAS,OAAO;;;;;;;;;;;;8DAGvC,8OAAC;oDAAI,WAAU;;sEACX,8OAAC;sEAAK;;;;;;sEACN,8OAAC;4DAAK,WAAU;;gEAAmB,cAAc,OAAO,CAAC;gEAAG;;;;;;;;;;;;;8DAEhE,8OAAC;oDAAI,WAAU;;sEACX,8OAAC;sEAAK;;;;;;sEACN,8OAAC;4DAAK,WAAU;sEAAiB,KAAK,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAShF","debugId":null}}]
}