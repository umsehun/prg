{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n    extends React.InputHTMLAttributes<HTMLInputElement> { }\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n    ({ className, type, ...props }, ref) => {\n        return (\n            <input\n                type={type}\n                className={cn(\n                    \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                {...props}\n            />\n        )\n    }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,sBAAQ,mNAAgB,CAC1B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC5B,qBACI,8OAAC;QACG,MAAM;QACN,WAAW,IAAA,qIAAE,EACT,yUACA;QAEJ,KAAK;QACJ,GAAG,KAAK;;;;;;AAGrB;AAEJ,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            \"rounded-xl border bg-card text-card-foreground shadow\",\n            className\n        )}\n        {...props}\n    />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n    />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EACT,yDACA;QAEH,GAAG,KAAK;;;;;;AAGjB,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAEvF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QACG,KAAK;QACL,WAAW,IAAA,qIAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGjB,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAE,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;AAErF,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAElE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxB,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,qIAAE,EAAC,8BAA8B;QAAa,GAAG,KAAK;;;;;;AAEpF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useSongs.ts"],"sourcesContent":["/**\n * useSongs Hook - Manages song library and OSZ files\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport type { SongData } from '../../shared/d.ts/ipc';\n\ninterface UseSongsReturn {\n    songs: SongData[];\n    loading: boolean;\n    error: string | null;\n    refreshLibrary: () => Promise<void>;\n    importOsz: (filePath: string) => Promise<boolean>;\n    getSong: (id: string) => SongData | undefined;\n    importFromFile: (file: File) => Promise<boolean>;\n}\n\nexport function useSongs(): UseSongsReturn {\n    const [songs, setSongs] = useState<SongData[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const refreshLibrary = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            if (typeof window !== 'undefined' && (window as any).electronAPI?.osz) {\n                const library = await (window as any).electronAPI.osz.getLibrary();\n                if (library && Array.isArray(library)) {\n                    setSongs(library);\n                } else {\n                    // 라이브러리가 비어있는 경우\n                    setSongs([]);\n                }\n            } else {\n                // Electron IPC를 사용할 수 없는 경우\n                console.warn('Electron IPC not available');\n                setSongs([]);\n                setError('Electron IPC를 사용할 수 없습니다');\n            }\n        } catch (err) {\n            console.error('Failed to load song library:', err);\n            setError('곡 라이브러리를 불러오는 데 실패했습니다');\n            setSongs([]);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    const importOsz = useCallback(async (filePath: string): Promise<boolean> => {\n        try {\n            setError(null);\n\n            if (typeof window !== 'undefined' && (window as any).electronAPI?.osz) {\n                const result = await (window as any).electronAPI.osz.importFromPath(filePath);\n\n                if (result.success) {\n                    // Refresh library after successful import\n                    await refreshLibrary();\n                    return true;\n                } else {\n                    setError(result.error || 'OSZ 파일 가져오기에 실패했습니다');\n                    return false;\n                }\n            } else {\n                setError('Electron IPC를 사용할 수 없습니다');\n                return false;\n            }\n        } catch (err) {\n            console.error('Failed to import OSZ:', err);\n            setError('OSZ 파일 가져오기 중 오류가 발생했습니다');\n            return false;\n        }\n    }, [refreshLibrary]);\n\n    const importFromFile = useCallback(async (file: File): Promise<boolean> => {\n        try {\n            setError(null);\n\n            if (typeof window !== 'undefined' && (window as any).electronAPI?.osz) {\n                // Convert File to buffer for IPC\n                const arrayBuffer = await file.arrayBuffer();\n                const buffer = new Uint8Array(arrayBuffer);\n\n                const result = await (window as any).electronAPI.osz.importFromBuffer({\n                    name: file.name,\n                    buffer: buffer\n                });\n\n                if (result.success) {\n                    // Refresh library after successful import\n                    await refreshLibrary();\n                    return true;\n                } else {\n                    setError(result.error || 'OSZ 파일 가져오기에 실패했습니다');\n                    return false;\n                }\n            } else {\n                setError('Electron IPC를 사용할 수 없습니다');\n                return false;\n            }\n        } catch (err) {\n            console.error('Failed to import file:', err);\n            setError('파일 가져오기 중 오류가 발생했습니다');\n            return false;\n        }\n    }, [refreshLibrary]);\n\n    const getSong = useCallback((id: string): SongData | undefined => {\n        return songs.find(song => song.id === id);\n    }, [songs]);\n\n    // Load songs on mount\n    useEffect(() => {\n        refreshLibrary();\n    }, [refreshLibrary]);\n\n    return {\n        songs,\n        loading,\n        error,\n        refreshLibrary,\n        importOsz,\n        getSong,\n        importFromFile,\n    };\n}\n\nexport default useSongs;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAID;AAFA;;AAeO,SAAS;IACZ,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAa,EAAE;IACjD,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAgB;IAElD,MAAM,iBAAiB,IAAA,oNAAW,EAAC;QAC/B,IAAI;YACA,WAAW;YACX,SAAS;YAET,IAAI,gBAAkB,eAAe,AAAC,OAAe,WAAW,EAAE;;iBAQ3D;gBACH,4BAA4B;gBAC5B,QAAQ,IAAI,CAAC;gBACb,SAAS,EAAE;gBACX,SAAS;YACb;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,SAAS;YACT,SAAS,EAAE;QACf,SAAU;YACN,WAAW;QACf;IACJ,GAAG,EAAE;IAEL,MAAM,YAAY,IAAA,oNAAW,EAAC,OAAO;QACjC,IAAI;YACA,SAAS;YAET,IAAI,gBAAkB,eAAe,AAAC,OAAe,WAAW,EAAE;;iBAW3D;gBACH,SAAS;gBACT,OAAO;YACX;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,yBAAyB;YACvC,SAAS;YACT,OAAO;QACX;IACJ,GAAG;QAAC;KAAe;IAEnB,MAAM,iBAAiB,IAAA,oNAAW,EAAC,OAAO;QACtC,IAAI;YACA,SAAS;YAET,IAAI,gBAAkB,eAAe,AAAC,OAAe,WAAW,EAAE;;iBAkB3D;gBACH,SAAS;gBACT,OAAO;YACX;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,0BAA0B;YACxC,SAAS;YACT,OAAO;QACX;IACJ,GAAG;QAAC;KAAe;IAEnB,MAAM,UAAU,IAAA,oNAAW,EAAC,CAAC;QACzB,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAC1C,GAAG;QAAC;KAAM;IAEV,sBAAsB;IACtB,IAAA,kNAAS,EAAC;QACN;IACJ,GAAG;QAAC;KAAe;IAEnB,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useGameState.ts"],"sourcesContent":["/**\n * useGameState Hook - Manages game state and controls\n */\n\n'use client';\n\nimport { useState, useCallback, useRef } from 'react';\nimport type { SongData, ScoreData } from '@shared/d.ts/ipc';\n\ntype GameMode = 'osu' | 'pin';\ntype GameState = 'idle' | 'loading' | 'playing' | 'paused' | 'finished';\n\ninterface GameStats {\n    score: number;\n    combo: number;\n    accuracy: number;\n    hits: {\n        perfect: number;\n        great: number;\n        good: number;\n        miss: number;\n    };\n}\n\ninterface UseGameStateReturn {\n    // State\n    currentSong: SongData | null;\n    gameMode: GameMode;\n    gameState: GameState;\n    stats: GameStats;\n    isPlaying: boolean;\n\n    // Controls\n    startGame: (song: SongData, mode: GameMode) => Promise<boolean>;\n    stopGame: () => Promise<void>;\n    pauseGame: () => Promise<void>;\n    resumeGame: () => Promise<void>;\n\n    // Score management\n    updateStats: (newStats: Partial<GameStats>) => void;\n    submitScore: () => Promise<boolean>;\n    resetStats: () => void;\n}\n\nexport function useGameState(): UseGameStateReturn {\n    const [currentSong, setCurrentSong] = useState<SongData | null>(null);\n    const [gameMode, setGameMode] = useState<GameMode>('osu'); // Default to osu mode\n    const [gameState, setGameState] = useState<GameState>('idle');\n    const [stats, setStats] = useState<GameStats>({\n        score: 0,\n        combo: 0,\n        accuracy: 100,\n        hits: {\n            perfect: 0,\n            great: 0,\n            good: 0,\n            miss: 0\n        }\n    });\n\n    const gameStartTime = useRef<number>(0);\n    const isPlaying = gameState === 'playing';\n\n    const startGame = useCallback(async (song: SongData, mode: GameMode): Promise<boolean> => {\n        try {\n            setGameState('loading');\n\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                const success = await window.electronAPI.game.start({\n                    songId: song.id,\n                    mode: mode,\n                    songData: song\n                });\n                if (success) {\n                    setCurrentSong(song);\n                    setGameMode(mode);\n                    setGameState('playing');\n                    gameStartTime.current = Date.now();\n                    resetStats();\n                    return true;\n                } else {\n                    setGameState('idle');\n                    return false;\n                }\n            } else {\n                // Fallback for development\n                console.warn('Electron IPC not available, starting mock game');\n                setCurrentSong(song);\n                setGameMode(mode);\n                setGameState('playing');\n                gameStartTime.current = Date.now();\n                resetStats();\n                return true;\n            }\n        } catch (error) {\n            console.error('Failed to start game:', error);\n            setGameState('idle');\n            return false;\n        }\n    }, []);\n\n    const stopGame = useCallback(async (): Promise<void> => {\n        try {\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                await window.electronAPI.game.stop();\n            }\n\n            setGameState('idle');\n            setCurrentSong(null);\n            setGameMode('pin'); // 기본값을 'pin'으로 설정\n        } catch (error) {\n            console.error('Failed to stop game:', error);\n        }\n    }, []);\n\n    const pauseGame = useCallback(async (): Promise<void> => {\n        try {\n            if (gameState === 'playing') {\n                if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                    await window.electronAPI.game.pause();\n                }\n                setGameState('paused');\n            }\n        } catch (error) {\n            console.error('Failed to pause game:', error);\n        }\n    }, [gameState]);\n\n    const resumeGame = useCallback(async (): Promise<void> => {\n        try {\n            if (gameState === 'paused') {\n                if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                    await window.electronAPI.game.resume();\n                }\n                setGameState('playing');\n            }\n        } catch (error) {\n            console.error('Failed to resume game:', error);\n        }\n    }, [gameState]);\n\n    const updateStats = useCallback((newStats: Partial<GameStats>) => {\n        setStats(prev => {\n            const updated = { ...prev, ...newStats };\n\n            // Calculate accuracy\n            const totalHits = updated.hits.perfect + updated.hits.great + updated.hits.good + updated.hits.miss;\n            if (totalHits > 0) {\n                const accurateHits = updated.hits.perfect + updated.hits.great + updated.hits.good;\n                updated.accuracy = Math.round((accurateHits / totalHits) * 100);\n            }\n\n            return updated;\n        });\n    }, []);\n\n    const submitScore = useCallback(async (): Promise<boolean> => {\n        try {\n            if (!currentSong || gameState !== 'finished') {\n                return false;\n            }\n\n            const scoreData: ScoreData = {\n                songId: currentSong.id,\n                score: stats.score,\n                accuracy: stats.accuracy,\n                combo: stats.combo,\n                rank: calculateRank(stats.accuracy),\n                timestamp: Date.now()\n            };\n\n            if (typeof window !== 'undefined' && window.electronAPI?.game) {\n                // submitScore가 없으면 임시로 true 반환\n                const gameAPI = window.electronAPI.game as any;\n                if (gameAPI.submitScore) {\n                    return await gameAPI.submitScore(scoreData);\n                } else {\n                    console.log('Score data prepared:', scoreData);\n                    return true;\n                }\n            } else {\n                // Mock submission for development\n                console.log('Mock score submission:', scoreData);\n                return true;\n            }\n        } catch (error) {\n            console.error('Failed to submit score:', error);\n            return false;\n        }\n    }, [currentSong, gameState, stats]);\n\n    const resetStats = useCallback(() => {\n        setStats({\n            score: 0,\n            combo: 0,\n            accuracy: 100,\n            hits: {\n                perfect: 0,\n                great: 0,\n                good: 0,\n                miss: 0\n            }\n        });\n    }, []);\n\n    return {\n        // State\n        currentSong,\n        gameMode,\n        gameState,\n        stats,\n        isPlaying,\n\n        // Controls\n        startGame,\n        stopGame,\n        pauseGame,\n        resumeGame,\n\n        // Score management\n        updateStats,\n        submitScore,\n        resetStats\n    };\n}\n\n// Helper function to calculate rank based on accuracy\nfunction calculateRank(accuracy: number): ScoreData['rank'] {\n    if (accuracy >= 97) return 'SS';\n    if (accuracy >= 90) return 'S';\n    if (accuracy >= 80) return 'A';\n    if (accuracy >= 70) return 'B';\n    if (accuracy >= 60) return 'C';\n    if (accuracy >= 50) return 'D';\n    return 'F';\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AAID;AAFA;;AAwCO,SAAS;IACZ,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAkB;IAChE,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAW,QAAQ,sBAAsB;IACjF,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAY;IACtD,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAY;QAC1C,OAAO;QACP,OAAO;QACP,UAAU;QACV,MAAM;YACF,SAAS;YACT,OAAO;YACP,MAAM;YACN,MAAM;QACV;IACJ;IAEA,MAAM,gBAAgB,IAAA,+MAAM,EAAS;IACrC,MAAM,YAAY,cAAc;IAEhC,MAAM,YAAY,IAAA,oNAAW,EAAC,OAAO,MAAgB;QACjD,IAAI;YACA,aAAa;YAEb,IAAI,gBAAkB,eAAe,OAAO,WAAW,EAAE;;iBAiBlD;gBACH,2BAA2B;gBAC3B,QAAQ,IAAI,CAAC;gBACb,eAAe;gBACf,YAAY;gBACZ,aAAa;gBACb,cAAc,OAAO,GAAG,KAAK,GAAG;gBAChC;gBACA,OAAO;YACX;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,yBAAyB;YACvC,aAAa;YACb,OAAO;QACX;IACJ,GAAG,EAAE;IAEL,MAAM,WAAW,IAAA,oNAAW,EAAC;QACzB,IAAI;YACA,IAAI,gBAAkB,eAAe,OAAO,WAAW,EAAE;;YAIzD,aAAa;YACb,eAAe;YACf,YAAY,QAAQ,kBAAkB;QAC1C,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,wBAAwB;QAC1C;IACJ,GAAG,EAAE;IAEL,MAAM,YAAY,IAAA,oNAAW,EAAC;QAC1B,IAAI;YACA,IAAI,cAAc,WAAW;gBACzB,IAAI,gBAAkB,eAAe,OAAO,WAAW,EAAE;;gBAGzD,aAAa;YACjB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,yBAAyB;QAC3C;IACJ,GAAG;QAAC;KAAU;IAEd,MAAM,aAAa,IAAA,oNAAW,EAAC;QAC3B,IAAI;YACA,IAAI,cAAc,UAAU;gBACxB,IAAI,gBAAkB,eAAe,OAAO,WAAW,EAAE;;gBAGzD,aAAa;YACjB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,0BAA0B;QAC5C;IACJ,GAAG;QAAC;KAAU;IAEd,MAAM,cAAc,IAAA,oNAAW,EAAC,CAAC;QAC7B,SAAS,CAAA;YACL,MAAM,UAAU;gBAAE,GAAG,IAAI;gBAAE,GAAG,QAAQ;YAAC;YAEvC,qBAAqB;YACrB,MAAM,YAAY,QAAQ,IAAI,CAAC,OAAO,GAAG,QAAQ,IAAI,CAAC,KAAK,GAAG,QAAQ,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,CAAC,IAAI;YACnG,IAAI,YAAY,GAAG;gBACf,MAAM,eAAe,QAAQ,IAAI,CAAC,OAAO,GAAG,QAAQ,IAAI,CAAC,KAAK,GAAG,QAAQ,IAAI,CAAC,IAAI;gBAClF,QAAQ,QAAQ,GAAG,KAAK,KAAK,CAAC,AAAC,eAAe,YAAa;YAC/D;YAEA,OAAO;QACX;IACJ,GAAG,EAAE;IAEL,MAAM,cAAc,IAAA,oNAAW,EAAC;QAC5B,IAAI;YACA,IAAI,CAAC,eAAe,cAAc,YAAY;gBAC1C,OAAO;YACX;YAEA,MAAM,YAAuB;gBACzB,QAAQ,YAAY,EAAE;gBACtB,OAAO,MAAM,KAAK;gBAClB,UAAU,MAAM,QAAQ;gBACxB,OAAO,MAAM,KAAK;gBAClB,MAAM,cAAc,MAAM,QAAQ;gBAClC,WAAW,KAAK,GAAG;YACvB;YAEA,IAAI,gBAAkB,eAAe,OAAO,WAAW,EAAE;;iBASlD;gBACH,kCAAkC;gBAClC,QAAQ,GAAG,CAAC,0BAA0B;gBACtC,OAAO;YACX;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;QACX;IACJ,GAAG;QAAC;QAAa;QAAW;KAAM;IAElC,MAAM,aAAa,IAAA,oNAAW,EAAC;QAC3B,SAAS;YACL,OAAO;YACP,OAAO;YACP,UAAU;YACV,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,MAAM;gBACN,MAAM;YACV;QACJ;IACJ,GAAG,EAAE;IAEL,OAAO;QACH,QAAQ;QACR;QACA;QACA;QACA;QACA;QAEA,WAAW;QACX;QACA;QACA;QACA;QAEA,mBAAmB;QACnB;QACA;QACA;IACJ;AACJ;AAEA,sDAAsD;AACtD,SAAS,cAAc,QAAgB;IACnC,IAAI,YAAY,IAAI,OAAO;IAC3B,IAAI,YAAY,IAAI,OAAO;IAC3B,IAAI,YAAY,IAAI,OAAO;IAC3B,IAAI,YAAY,IAAI,OAAO;IAC3B,IAAI,YAAY,IAAI,OAAO;IAC3B,IAAI,YAAY,IAAI,OAAO;IAC3B,OAAO;AACX","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/app/select/page.tsx"],"sourcesContent":["/**\n * Select Page - Song Library with Real Data\n */\n\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowLeft, Search, Play, Star, Heart, Music, Clock, Zap, RefreshCw } from 'lucide-react';\nimport Link from 'next/link';\nimport { useState, useMemo } from 'react';\nimport { useSongs } from '@/hooks/useSongs';\nimport { useGameState } from '@/hooks/useGameState';\n\nexport default function SelectPage() {\n    const { songs, loading, error, refreshLibrary } = useSongs();\n    const { startGame } = useGameState();\n    const [searchQuery, setSearchQuery] = useState('');\n    const [selectedDifficulty, setSelectedDifficulty] = useState<string>('all');\n\n    // Filter songs based on search and difficulty\n    const filteredSongs = useMemo(() => {\n        return songs.filter(song => {\n            const matchesSearch = song.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                song.artist.toLowerCase().includes(searchQuery.toLowerCase());\n\n            const matchesDifficulty = selectedDifficulty === 'all' ||\n                Object.keys(song.difficulty).some(diff =>\n                    diff === selectedDifficulty && song.difficulty[diff as keyof typeof song.difficulty]\n                );\n\n            return matchesSearch && matchesDifficulty;\n        });\n    }, [songs, searchQuery, selectedDifficulty]);\n\n    const handlePlaySong = async (songId: string, mode: 'osu' | 'pin' = 'pin') => {\n        const song = songs.find(s => s.id === songId);\n        if (song) {\n            await startGame(song, mode);\n            // Navigate to game page or pin page based on mode\n            window.location.href = mode === 'pin' ? '/pin' : '/game';\n        }\n    };\n\n    const formatDuration = (ms: number) => {\n        const minutes = Math.floor(ms / 60000);\n        const seconds = Math.floor((ms % 60000) / 1000);\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    if (loading) {\n        return (\n            <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 flex items-center justify-center\">\n                <div className=\"text-center\">\n                    <div className=\"w-16 h-16 border-4 border-purple-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                    <p className=\"text-white text-lg\">Loading Song Library...</p>\n                </div>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-6\">\n                <div className=\"max-w-4xl mx-auto\">\n                    <Card className=\"bg-red-900/20 border-red-500\">\n                        <CardHeader>\n                            <CardTitle className=\"text-red-400\">Error Loading Songs</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"text-red-300 mb-4\">{error}</p>\n                            <Button onClick={refreshLibrary} variant=\"outline\" className=\"border-red-500 text-red-300\">\n                                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                                Retry\n                            </Button>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-6 pt-20\">\n            <div className=\"max-w-7xl mx-auto\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between mb-8\">\n                    <div className=\"flex items-center gap-4\">\n                        <Link href=\"/\">\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-300 hover:text-white\">\n                                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                                Back\n                            </Button>\n                        </Link>\n                        <div>\n                            <h1 className=\"text-4xl font-bold text-white mb-2\">곡 라이브러리</h1>\n                            <p className=\"text-slate-400 text-lg\">{songs.length}곡 사용 가능</p>\n                        </div>\n                    </div>\n\n                    <Button onClick={refreshLibrary} variant=\"outline\" className=\"border-purple-500 text-purple-300\">\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                        새로고침\n                    </Button>\n                </div>\n\n                {/* Search and Filters */}\n                <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n                    <div className=\"relative flex-1\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                            placeholder=\"곡이나 아티스트 검색...\"\n                            value={searchQuery}\n                            onChange={(e) => setSearchQuery(e.target.value)}\n                            className=\"pl-10 bg-slate-800 border-slate-700 text-white placeholder-slate-400\"\n                        />\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                        {['all', 'easy', 'normal', 'hard', 'expert'].map((difficulty) => (\n                            <Button\n                                key={difficulty}\n                                variant={selectedDifficulty === difficulty ? 'default' : 'ghost'}\n                                size=\"sm\"\n                                onClick={() => setSelectedDifficulty(difficulty)}\n                                className={selectedDifficulty === difficulty\n                                    ? 'bg-purple-500 text-white'\n                                    : 'text-slate-300 hover:text-white'\n                                }\n                            >\n                                {difficulty === 'all' ? '전체' :\n                                    difficulty === 'easy' ? '쉬움' :\n                                        difficulty === 'normal' ? '보통' :\n                                            difficulty === 'hard' ? '어려움' : '익스퍼트'}\n                            </Button>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Songs Grid */}\n                {filteredSongs.length === 0 ? (\n                    <Card className=\"bg-slate-800/50 border-slate-700\">\n                        <CardContent className=\"text-center py-12\">\n                            <Music className=\"w-16 h-16 text-slate-400 mx-auto mb-4\" />\n                            <h3 className=\"text-xl font-semibold text-white mb-2\">곡을 찾을 수 없습니다</h3>\n                            <p className=\"text-slate-400 mb-4\">\n                                {searchQuery ? '검색 조건에 맞는 곡이 없습니다.' : '라이브러리가 비어 있습니다.'}\n                            </p>\n                            <Button variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                                .osz 파일 가져오기\n                            </Button>\n                        </CardContent>\n                    </Card>\n                ) : (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        {filteredSongs.map((song) => (\n                            <Card\n                                key={song.id}\n                                className=\"bg-slate-800/50 border-slate-700 hover:bg-slate-700/50 transition-all duration-300 group\"\n                            >\n                                <CardHeader>\n                                    <div className=\"flex justify-between items-start\">\n                                        <div className=\"flex-1 min-w-0\">\n                                            <CardTitle className=\"text-white text-lg truncate\">{song.title}</CardTitle>\n                                            <CardDescription className=\"text-slate-400 truncate\">{song.artist}</CardDescription>\n                                        </div>\n                                        <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-400 hover:text-red-400\">\n                                            <Heart className=\"w-4 h-4\" />\n                                        </Button>\n                                    </div>\n                                </CardHeader>\n\n                                <CardContent className=\"space-y-4\">\n                                    {/* Song Info */}\n                                    <div className=\"flex items-center justify-between text-sm text-slate-400\">\n                                        <div className=\"flex items-center gap-2\">\n                                            <Clock className=\"w-4 h-4\" />\n                                            {formatDuration(song.duration)}\n                                        </div>\n                                        <div className=\"flex items-center gap-2\">\n                                            <Zap className=\"w-4 h-4\" />\n                                            {song.bpm} BPM\n                                        </div>\n                                    </div>\n\n                                    {/* Difficulties */}\n                                    <div className=\"flex gap-1\">\n                                        {Object.entries(song.difficulty).map(([diff, stars]) =>\n                                            stars ? (\n                                                <div\n                                                    key={diff}\n                                                    className={`px-2 py-1 rounded text-xs font-medium ${diff === 'easy' ? 'bg-green-500/20 text-green-400' :\n                                                            diff === 'normal' ? 'bg-blue-500/20 text-blue-400' :\n                                                                diff === 'hard' ? 'bg-yellow-500/20 text-yellow-400' :\n                                                                    'bg-red-500/20 text-red-400'\n                                                        }`}\n                                                >\n                                                    {diff === 'easy' ? '쉬움' :\n                                                        diff === 'normal' ? '보통' :\n                                                            diff === 'hard' ? '어려움' :\n                                                                diff === 'expert' ? '익스퍼트' : diff.charAt(0).toUpperCase() + diff.slice(1)} {String(stars)}★\n                                                </div>\n                                            ) : null\n                                        )}\n                                    </div>\n\n                                    {/* Action Buttons */}\n                                    <div className=\"flex gap-2 pt-2\">\n                                        <Button\n                                            size=\"sm\"\n                                            onClick={() => handlePlaySong(song.id, 'pin')}\n                                            className=\"flex-1 bg-purple-500 hover:bg-purple-600 text-white\"\n                                        >\n                                            <Play className=\"w-4 h-4 mr-2\" />\n                                            핀 모드\n                                        </Button>\n                                        <Button\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            onClick={() => handlePlaySong(song.id, 'osu')}\n                                            className=\"flex-1 border-slate-600 text-slate-300 hover:bg-slate-700\"\n                                        >\n                                            osu! 모드\n                                        </Button>\n                                    </div>\n                                </CardContent>\n                            </Card>\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}