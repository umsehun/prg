{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            \"rounded-xl border bg-card text-card-foreground shadow\",\n            className\n        )}\n        {...props}\n    />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n    />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,2KAAgB,MAG3B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QACG,KAAK;QACL,WAAW,IAAA,wIAAE,EACT,yDACA;QAEH,GAAG,KAAK;;;;;;;;AAGjB,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,2KAAgB,OAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;;;AAEvF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QACG,KAAK;QACL,WAAW,IAAA,wIAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;;AAGjB,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,2KAAgB,OAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAE,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;;;AAErF,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;;;AAElE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,2KAAgB,QAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,8BAA8B;QAAa,GAAG,KAAK;;;;;;;;AAEpF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/lib/ipc-service.ts"],"sourcesContent":["/**\n * IPC Service - Frontend service for communicating with Electron main process\n * Provides type-safe APIs for renderer to interact with backend\n */\n\ninterface ChartData {\n    id: string\n    title: string\n    artist: string\n    difficulty: string\n    audioPath: string\n    backgroundPath?: string\n    duration: number\n    bpm: number\n}\n\ninterface GameSession {\n    sessionId: string\n    chartId: string\n    startTime: number\n    score: number\n    accuracy: number\n    combo: number\n}\n\ninterface Settings {\n    audio: {\n        masterVolume: number\n        musicVolume: number\n        effectVolume: number\n        enableFeedback: boolean\n    }\n    game: {\n        scrollSpeed: number\n        noteSize: number\n        enableParticles: boolean\n        showFps: boolean\n    }\n    display: {\n        fullscreen: boolean\n        vsync: boolean\n        targetFps: number\n    }\n    controls: {\n        keyBindings: {\n            lane1: string\n            lane2: string\n            lane3: string\n            lane4: string\n        }\n    }\n}\n\nclass IPCService {\n    private static instance: IPCService\n\n    public static getInstance(): IPCService {\n        if (!IPCService.instance) {\n            IPCService.instance = new IPCService()\n        }\n        return IPCService.instance\n    }\n\n    private get api() {\n        if (!(window as any).electronAPI) {\n            throw new Error('Electron API not available. Make sure this is running in Electron.')\n        }\n        return (window as any).electronAPI\n    }\n\n    // Game methods - Updated for new runtime .osu loading API\n    async startGame(params: { chartId: string; difficulty?: string; gameMode: string; mods?: string[] }): Promise<GameSession> {\n        const result = await this.api.game.start(params); // ✅ Updated: Use new API params\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to start game');\n        }\n        // Mock GameSession for now - this should come from the backend\n        return {\n            sessionId: 'mock-session-' + Date.now(),\n            chartId: params.chartId,\n            startTime: Date.now(),\n            score: 0,\n            accuracy: 1.0,\n            combo: 0\n        };\n    }\n\n    async stopGame(): Promise<void> {\n        const result = await this.api.game.stop()\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to stop game')\n        }\n    }\n\n    async pauseGame(): Promise<void> {\n        const result = await this.api.game.pause()\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to pause game')\n        }\n    }\n\n    async resumeGame(): Promise<void> {\n        const result = await this.api.game.resume()\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to resume game')\n        }\n    }\n\n    throwKnife(data: { id: string; time: number; lane: number }): void {\n        this.api.game.throwKnife({ id: data.id, time: data.time })\n    }\n\n    onKnifeResult(callback: (result: any) => void): () => void {\n        return this.api.game.onKnifeResult(callback)\n    }\n\n    // Chart methods (using osz API)\n    async getChartLibrary(): Promise<ChartData[]> {\n        const result = await this.api.osz.getLibrary()\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to load chart library')\n        }\n        return result.charts || []\n    }\n\n    async getChart(chartId: string): Promise<ChartData> {\n        // For now, get from library and find by ID\n        const library = await this.getChartLibrary()\n        const chart = library.find(c => c.id === chartId)\n        if (!chart) {\n            throw new Error(`Chart ${chartId} not found`)\n        }\n        return chart\n    }\n\n    async importChart(filePath?: string): Promise<{ success: boolean; error?: string }> {\n        const result = await this.api.osz.import(filePath)\n        return {\n            success: result.success,\n            error: result.error\n        }\n    }\n\n    async removeChart(chartId: string): Promise<void> {\n        const result = await this.api.osz.removeChart(chartId)\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to remove chart')\n        }\n    }\n\n    async getChartAudio(chartId: string): Promise<string> {\n        const result = await this.api.osz.getAudio(chartId)\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to get audio')\n        }\n        // Convert ArrayBuffer to URL if needed\n        return 'mock-audio-url'\n    }\n\n    async getChartBackground(chartId: string): Promise<string> {\n        // Mock implementation for now\n        return 'mock-background-url'\n    }\n\n    // Settings methods\n    async getSettings(): Promise<Settings> {\n        const result = await this.api.settings.getAll()\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to load settings')\n        }\n\n        // Return default settings if none exist\n        return result.settings || {\n            audio: {\n                masterVolume: 1.0,\n                musicVolume: 0.8,\n                effectVolume: 0.6,\n                enableFeedback: true\n            },\n            game: {\n                scrollSpeed: 1.0,\n                noteSize: 1.0,\n                enableParticles: true,\n                showFps: false\n            },\n            display: {\n                fullscreen: false,\n                vsync: true,\n                targetFps: 60\n            },\n            controls: {\n                keyBindings: {\n                    lane1: 'D',\n                    lane2: 'F',\n                    lane3: 'J',\n                    lane4: 'K'\n                }\n            }\n        }\n    }\n\n    async setSetting(key: string, value: any): Promise<void> {\n        const result = await this.api.settings.set(key, value)\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to update setting')\n        }\n    }\n\n    async resetSettings(): Promise<void> {\n        const result = await this.api.settings.reset()\n        if (!result.success) {\n            throw new Error(result.error || 'Failed to reset settings')\n        }\n    }\n\n    onSettingsChange(callback: (settings: Settings) => void): () => void {\n        return this.api.settings.onChange((change: any) => {\n            // For now, just trigger a reload - in production this would be more sophisticated\n            this.getSettings().then(callback).catch(console.error)\n        })\n    }\n\n    // System methods\n    async getVersion(): Promise<string> {\n        return this.api.system.version || '0.1.0'\n    }\n\n    async openExternal(url: string): Promise<void> {\n        // Mock implementation - would need to add to backend\n        window.open(url, '_blank')\n    }\n\n    async showMessageBox(options: any): Promise<any> {\n        // Mock implementation - would use alert for now\n        return { response: 0 }\n    }\n}\n\nexport const ipcService = IPCService.getInstance()\nexport type { ChartData, GameSession, Settings }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/useGameState.ts"],"sourcesContent":["/**\n * useGameState Hook - Manages game state and controls\n * ✅ UNIFIED: Uses consistent ipc-service pattern throughout\n */\n\n'use client';\n\nimport { useState, useCallback, useRef } from 'react';\nimport type { SongData, ScoreData } from '../../shared/d.ts/ipc';\nimport { ipcService } from '../lib/ipc-service';\n\ntype GameMode = 'osu' | 'pin';\ntype GameState = 'idle' | 'loading' | 'playing' | 'paused' | 'finished';\n\ninterface GameStats {\n    score: number;\n    combo: number;\n    accuracy: number;\n    hits: {\n        perfect: number;\n        great: number;\n        good: number;\n        miss: number;\n    };\n}\n\ninterface UseGameStateReturn {\n    // State\n    currentSong: SongData | null;\n    gameMode: GameMode;\n    gameState: GameState;\n    stats: GameStats;\n    isPlaying: boolean;\n\n    // Controls\n    startGame: (song: SongData, mode: GameMode) => Promise<boolean>;\n    stopGame: () => Promise<void>;\n    pauseGame: () => Promise<void>;\n    resumeGame: () => Promise<void>;\n\n    // Score management\n    updateStats: (newStats: Partial<GameStats>) => void;\n    submitScore: () => Promise<boolean>;\n    resetStats: () => void;\n}\n\nexport function useGameState(): UseGameStateReturn {\n    const [currentSong, setCurrentSong] = useState<SongData | null>(null);\n    const [gameMode, setGameMode] = useState<GameMode>('osu');\n    const [gameState, setGameState] = useState<GameState>('idle');\n    const [stats, setStats] = useState<GameStats>({\n        score: 0,\n        combo: 0,\n        accuracy: 100,\n        hits: {\n            perfect: 0,\n            great: 0,\n            good: 0,\n            miss: 0\n        }\n    });\n\n    const gameStartTime = useRef<number>(0);\n    const isPlaying = gameState === 'playing';\n\n    const startGame = useCallback(async (song: SongData, mode: GameMode = 'pin'): Promise<boolean> => {\n        try {\n            setGameState('loading');\n\n            // ✅ CRITICAL FIX: Always stop any existing game first\n            try {\n                await ipcService.stopGame();\n                console.log('🛑 Stopped existing game session');\n            } catch (stopError) {\n                console.log('ℹ️ No existing game to stop:', stopError);\n            }\n\n            // ✅ NEW API: Use chartId and difficulty instead of full chartData\n            console.log('🎮 Starting pin game with song:', song.title, '(ID:', song.id, ')');\n\n            const gameStartParams = {\n                chartId: song.id,\n                difficulty: 'Normal', // Default difficulty - could be made configurable\n                gameMode: 'osu' as const,\n                mods: [] as string[]\n            };\n\n            console.log('🎮 Starting game with new API params:', gameStartParams);\n\n            // ✅ Start new game session\n            const gameSession = await ipcService.startGame(gameStartParams);\n            console.log('🎮 Pin game session started:', gameSession);\n\n            setCurrentSong(song);\n            setGameMode('pin'); // Always set to pin mode\n            setGameState('playing');\n            gameStartTime.current = Date.now();\n            resetStats();\n            return true;\n\n        } catch (error) {\n            console.error('❌ Game start failed:', error);\n            setGameState('idle');\n            return false;\n        }\n    }, []);\n\n    const stopGame = useCallback(async (): Promise<void> => {\n        try {\n            // Only try to stop if game is actually running\n            if (gameState === 'playing' || gameState === 'paused') {\n                await ipcService.stopGame();\n            } else {\n                console.log('🛑 No game running, skipping stop command');\n            }\n\n            setGameState('idle');\n            setCurrentSong(null);\n        } catch (error) {\n            console.log('ℹ️ Stop game error (may be expected):', error);\n            // Always reset state even if stop fails\n            setGameState('idle');\n            setCurrentSong(null);\n        }\n    }, [gameState]);\n\n    const pauseGame = useCallback(async (): Promise<void> => {\n        try {\n            // ✅ Use ipcService for consistency\n            if (typeof window !== 'undefined' && window.electronAPI?.game?.pause) {\n                await window.electronAPI.game.pause();\n                setGameState('paused');\n            }\n        } catch (error) {\n            console.error('❌ Failed to pause game:', error);\n        }\n    }, []);\n\n    const resumeGame = useCallback(async (): Promise<void> => {\n        try {\n            // ✅ Use ipcService for consistency\n            if (typeof window !== 'undefined' && window.electronAPI?.game?.resume) {\n                await window.electronAPI.game.resume();\n                setGameState('playing');\n            }\n        } catch (error) {\n            console.error('❌ Failed to resume game:', error);\n        }\n    }, []);\n\n    const updateStats = useCallback((newStats: Partial<GameStats>) => {\n        setStats(prev => ({ ...prev, ...newStats }));\n    }, []);\n\n    const submitScore = useCallback(async (): Promise<boolean> => {\n        if (!currentSong) return false;\n\n        try {\n            const scoreData: ScoreData = {\n                songId: currentSong.id,\n                score: stats.score,\n                accuracy: stats.accuracy,\n                combo: stats.combo,\n                rank: calculateRank(stats.accuracy),\n                timestamp: Date.now(),\n            };\n\n            // ✅ TODO: Implement actual score submission via ipcService\n            console.log('📊 Score submission (TODO):', scoreData);\n            return true;\n\n        } catch (error) {\n            console.error('❌ Failed to submit score:', error);\n            return false;\n        }\n    }, [currentSong, stats]);\n\n    const resetStats = useCallback(() => {\n        setStats({\n            score: 0,\n            combo: 0,\n            accuracy: 100,\n            hits: {\n                perfect: 0,\n                great: 0,\n                good: 0,\n                miss: 0\n            }\n        });\n    }, []);\n\n    return {\n        // State\n        currentSong,\n        gameMode,\n        gameState,\n        stats,\n        isPlaying,\n\n        // Controls\n        startGame,\n        stopGame,\n        pauseGame,\n        resumeGame,\n\n        // Score management\n        updateStats,\n        submitScore,\n        resetStats,\n    };\n}\n\n// Helper function to calculate rank based on accuracy\nfunction calculateRank(accuracy: number): ScoreData['rank'] {\n    if (accuracy >= 97) return 'SS';\n    if (accuracy >= 90) return 'S';\n    if (accuracy >= 80) return 'A';\n    if (accuracy >= 70) return 'B';\n    if (accuracy >= 60) return 'C';\n    if (accuracy >= 50) return 'D';\n    return 'F';\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/lib/audio/audio-engine.ts"],"sourcesContent":["/**\n * High-precision audio system using Web Audio API\n * Handles audio playback with minimal latency for rhythm games\n */\n\nexport class AudioEngine {\n    private context: AudioContext | null = null;\n    private audioBuffer: AudioBuffer | null = null;\n    private sourceNode: AudioBufferSourceNode | null = null;\n    private gainNode: GainNode | null = null;\n    private startTime: number = 0;\n    private pauseTime: number = 0;\n    private isPlaying: boolean = false;\n    private isPaused: boolean = false;\n\n    constructor() {\n        this.initializeAudioContext();\n    }\n\n    private async initializeAudioContext(): Promise<void> {\n        try {\n            // Create audio context with optimal settings\n            this.context = new AudioContext({\n                latencyHint: 'interactive', // Minimize latency\n                sampleRate: 44100\n            });\n\n            // Create gain node for volume control\n            this.gainNode = this.context.createGain();\n            this.gainNode.connect(this.context.destination);\n\n            // Resume context if suspended (required by browsers)\n            if (this.context.state === 'suspended') {\n                await this.context.resume();\n            }\n        } catch (error) {\n            console.error('Failed to initialize Audio Context:', error);\n        }\n    }\n\n    /**\n     * Load audio file from URL or ArrayBuffer\n     */\n    async loadAudio(audioData: ArrayBuffer): Promise<boolean> {\n        if (!this.context) {\n            console.error('Audio context not initialized');\n            return false;\n        }\n\n        try {\n            // Decode audio data\n            this.audioBuffer = await this.context.decodeAudioData(audioData);\n            return true;\n        } catch (error) {\n            console.error('Failed to decode audio data:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Play audio from specific time offset\n     */\n    play(offset: number = 0): boolean {\n        if (!this.context || !this.audioBuffer) {\n            console.error('Audio not loaded or context not available');\n            return false;\n        }\n\n        try {\n            // Stop current playback if any\n            this.stop();\n\n            // Create new source node\n            this.sourceNode = this.context.createBufferSource();\n            this.sourceNode.buffer = this.audioBuffer;\n            this.sourceNode.connect(this.gainNode!);\n\n            // Start playback\n            const when = this.context.currentTime;\n            this.sourceNode.start(when, offset);\n\n            this.startTime = when - offset;\n            this.isPlaying = true;\n            this.isPaused = false;\n            this.pauseTime = 0;\n\n            return true;\n        } catch (error) {\n            console.error('Failed to play audio:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Pause audio playback\n     */\n    pause(): boolean {\n        if (!this.isPlaying || this.isPaused || !this.sourceNode) {\n            return false;\n        }\n\n        try {\n            this.pauseTime = this.getCurrentTime();\n            this.sourceNode.stop();\n            this.sourceNode = null;\n            this.isPaused = true;\n            this.isPlaying = false;\n            return true;\n        } catch (error) {\n            console.error('Failed to pause audio:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Resume paused audio\n     */\n    resume(): boolean {\n        if (!this.isPaused) {\n            return false;\n        }\n\n        return this.play(this.pauseTime / 1000); // Convert to seconds\n    }\n\n    /**\n     * Stop audio playback\n     */\n    stop(): void {\n        if (this.sourceNode) {\n            try {\n                this.sourceNode.stop();\n            } catch (error) {\n                // Source might already be stopped\n            }\n            this.sourceNode = null;\n        }\n\n        this.isPlaying = false;\n        this.isPaused = false;\n        this.startTime = 0;\n        this.pauseTime = 0;\n    }\n\n    /**\n     * Get current playback time in milliseconds\n     * This is the CRITICAL method for rhythm game timing\n     */\n    getCurrentTime(): number {\n        if (!this.context) return 0;\n\n        if (this.isPaused) {\n            return this.pauseTime;\n        }\n\n        if (this.isPlaying && this.sourceNode) {\n            // Use AudioContext.currentTime for precise timing\n            const elapsed = this.context.currentTime - this.startTime;\n            return elapsed * 1000; // Convert to milliseconds\n        }\n\n        return 0;\n    }\n\n    /**\n     * Set playback volume (0.0 to 1.0)\n     */\n    setVolume(volume: number): void {\n        if (this.gainNode) {\n            this.gainNode.gain.value = Math.max(0, Math.min(1, volume));\n        }\n    }\n\n    /**\n     * Get audio duration in milliseconds\n     */\n    getDuration(): number {\n        return this.audioBuffer ? this.audioBuffer.duration * 1000 : 0;\n    }\n\n    /**\n     * Check if audio is currently playing\n     */\n    getIsPlaying(): boolean {\n        return this.isPlaying;\n    }\n\n    /**\n     * Check if audio is paused\n     */\n    getIsPaused(): boolean {\n        return this.isPaused;\n    }\n\n    /**\n     * Clean up resources\n     */\n    dispose(): void {\n        this.stop();\n\n        if (this.context) {\n            this.context.close();\n            this.context = null;\n        }\n\n        this.audioBuffer = null;\n        this.gainNode = null;\n    }\n}\n\n/**\n * Hitsound player for feedback sounds\n */\nexport class HitsoundPlayer {\n    private context: AudioContext | null = null;\n    private hitsounds: Map<string, AudioBuffer> = new Map();\n    private gainNode: GainNode | null = null;\n\n    constructor(audioContext?: AudioContext) {\n        if (audioContext) {\n            this.context = audioContext;\n            this.setupGainNode();\n        } else {\n            this.initializeAudioContext();\n        }\n    }\n\n    private async initializeAudioContext(): Promise<void> {\n        try {\n            this.context = new AudioContext({\n                latencyHint: 'interactive',\n                sampleRate: 44100\n            });\n\n            this.setupGainNode();\n\n            if (this.context.state === 'suspended') {\n                await this.context.resume();\n            }\n        } catch (error) {\n            console.error('Failed to initialize hitsound audio context:', error);\n        }\n    }\n\n    private setupGainNode(): void {\n        if (this.context) {\n            this.gainNode = this.context.createGain();\n            this.gainNode.connect(this.context.destination);\n        }\n    }\n\n    /**\n     * Load hitsound from audio data\n     */\n    async loadHitsound(name: string, audioData: ArrayBuffer): Promise<boolean> {\n        if (!this.context) return false;\n\n        try {\n            const buffer = await this.context.decodeAudioData(audioData);\n            this.hitsounds.set(name, buffer);\n            return true;\n        } catch (error) {\n            console.error(`Failed to load hitsound ${name}:`, error);\n            return false;\n        }\n    }\n\n    /**\n     * Play hitsound immediately\n     */\n    play(name: string, volume: number = 1.0): void {\n        if (!this.context || !this.gainNode) return;\n\n        const buffer = this.hitsounds.get(name);\n        if (!buffer) return;\n\n        try {\n            const source = this.context.createBufferSource();\n            const gain = this.context.createGain();\n\n            source.buffer = buffer;\n            gain.gain.value = Math.max(0, Math.min(1, volume));\n\n            source.connect(gain);\n            gain.connect(this.gainNode);\n\n            source.start();\n        } catch (error) {\n            console.error(`Failed to play hitsound ${name}:`, error);\n        }\n    }\n\n    /**\n     * Set hitsound volume\n     */\n    setVolume(volume: number): void {\n        if (this.gainNode) {\n            this.gainNode.gain.value = Math.max(0, Math.min(1, volume));\n        }\n    }\n\n    /**\n     * Clean up resources\n     */\n    dispose(): void {\n        this.hitsounds.clear();\n\n        if (this.context) {\n            this.context.close();\n            this.context = null;\n        }\n\n        this.gainNode = null;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 780, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/game/GameCanvas.tsx"],"sourcesContent":["/**\n * GameCanvas - Dedicated Canvas Rendering Component\n * Single Responsibility: Handle all canvas drawing and animations\n */\n\n'use client';\n\nimport { useEffect, useRef, useCallback } from 'react';\n\ninterface Pin {\n    id: number;\n    angle: number;\n    timestamp: number;\n    stuck: boolean;\n}\n\ninterface HitEffect {\n    id: number;\n    x: number;\n    y: number;\n    type: 'PERFECT' | 'GOOD' | 'MISS';\n    timestamp: number;\n}\n\ninterface GameCanvasProps {\n    targetRotation: number;\n    pins: Pin[];\n    hitEffects: HitEffect[];\n    currentPinAngle: number;\n    gameState: string;\n    width?: number;\n    height?: number;\n}\n\nconst TARGET_RADIUS = 150;\nconst PIN_LENGTH = 40;\n\nexport function GameCanvas({\n    targetRotation,\n    pins,\n    hitEffects,\n    currentPinAngle,\n    gameState,\n    width = 600,\n    height = 600\n}: GameCanvasProps) {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const animationFrameRef = useRef<number>();\n\n    const render = useCallback(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) return;\n\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // Set center point\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n\n        // Draw target circle\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, TARGET_RADIUS, 0, 2 * Math.PI);\n        ctx.strokeStyle = '#8b5cf6';\n        ctx.lineWidth = 3;\n        ctx.stroke();\n\n        // Draw center point\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = '#8b5cf6';\n        ctx.fill();\n\n        // Draw stuck pins\n        pins.forEach(pin => {\n            const x = centerX + Math.cos((pin.angle * Math.PI) / 180) * TARGET_RADIUS;\n            const y = centerY + Math.sin((pin.angle * Math.PI) / 180) * TARGET_RADIUS;\n\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(\n                x + Math.cos((pin.angle * Math.PI) / 180) * PIN_LENGTH,\n                y + Math.sin((pin.angle * Math.PI) / 180) * PIN_LENGTH\n            );\n            ctx.strokeStyle = '#fbbf24';\n            ctx.lineWidth = 4;\n            ctx.stroke();\n\n            // Draw pin head\n            ctx.beginPath();\n            ctx.arc(\n                x + Math.cos((pin.angle * Math.PI) / 180) * PIN_LENGTH,\n                y + Math.sin((pin.angle * Math.PI) / 180) * PIN_LENGTH,\n                3,\n                0,\n                2 * Math.PI\n            );\n            ctx.fillStyle = '#f59e0b';\n            ctx.fill();\n        });\n\n        // Draw current pin position indicator\n        const currentX = centerX + Math.cos(((targetRotation + currentPinAngle) * Math.PI) / 180) * (TARGET_RADIUS + 30);\n        const currentY = centerY + Math.sin(((targetRotation + currentPinAngle) * Math.PI) / 180) * (TARGET_RADIUS + 30);\n\n        ctx.beginPath();\n        ctx.arc(currentX, currentY, 8, 0, 2 * Math.PI);\n        ctx.fillStyle = '#ef4444';\n        ctx.fill();\n\n        // Draw aim line\n        ctx.beginPath();\n        ctx.moveTo(currentX, currentY);\n        ctx.lineTo(centerX, centerY);\n        ctx.strokeStyle = '#ef444440';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([5, 5]);\n        ctx.stroke();\n        ctx.setLineDash([]);\n\n        // Draw hit effects\n        hitEffects.forEach(effect => {\n            const age = Date.now() - effect.timestamp;\n            const alpha = Math.max(0, 1 - age / 1000);\n            const scale = 1 + (age / 1000) * 0.5; // Grow effect\n\n            ctx.save();\n            ctx.globalAlpha = alpha;\n            ctx.font = `${20 * scale}px bold`;\n            ctx.textAlign = 'center';\n\n            if (effect.type === 'PERFECT') {\n                ctx.fillStyle = '#22c55e';\n                ctx.fillText('PERFECT!', centerX + effect.x, centerY + effect.y);\n            } else if (effect.type === 'GOOD') {\n                ctx.fillStyle = '#eab308';\n                ctx.fillText('GOOD!', centerX + effect.x, centerY + effect.y);\n            } else {\n                ctx.fillStyle = '#ef4444';\n                ctx.fillText('MISS!', centerX + effect.x, centerY + effect.y);\n            }\n            ctx.restore();\n        });\n\n        // Continue animation if playing\n        if (gameState === 'playing') {\n            animationFrameRef.current = requestAnimationFrame(render);\n        }\n    }, [targetRotation, pins, hitEffects, currentPinAngle, gameState]);\n\n    // Animation loop\n    useEffect(() => {\n        render();\n\n        return () => {\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current);\n            }\n        };\n    }, [render]);\n\n    return (\n        <canvas\n            ref={canvasRef}\n            width={width}\n            height={height}\n            className=\"w-full h-auto bg-slate-900 rounded-lg border border-slate-600\"\n            style={{ maxWidth: `${width}px`, maxHeight: `${height}px` }}\n        />\n    );\n}\n\nexport type { Pin, HitEffect, GameCanvasProps };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/game/HitJudgment.tsx"],"sourcesContent":["/**\n * HitJudgment - Dedicated Hit Detection and Judgment System\n * Single Responsibility: Handle all hit detection, timing, and judgment logic\n */\n\n'use client';\n\nimport { useCallback } from 'react';\nimport type { Pin, HitEffect } from './GameCanvas';\n\ninterface GameStats {\n    score: number;\n    combo: number;\n    accuracy: number;\n    hits: {\n        perfect: number;\n        great: number;\n        good: number;\n        miss: number;\n    };\n}\n\ninterface HitJudgmentProps {\n    pins: Pin[];\n    onHitResult: (result: 'PERFECT' | 'GOOD' | 'MISS', effect: HitEffect) => void;\n    onStatsUpdate: (stats: GameStats) => void;\n    currentStats: GameStats;\n}\n\n// Game Constants\nconst SAFE_ZONE = 30; // degrees between pins\nconst TARGET_RADIUS = 150;\n\nexport function HitJudgment({\n    pins,\n    onHitResult,\n    onStatsUpdate,\n    currentStats\n}: HitJudgmentProps) {\n\n    // Hit detection logic\n    const checkHitDetection = useCallback((throwAngle: number): 'PERFECT' | 'GOOD' | 'MISS' => {\n        // Check for collision with existing pins\n        for (const pin of pins) {\n            const angleDiff = Math.abs(throwAngle - pin.angle);\n            const normalizedDiff = Math.min(angleDiff, 360 - angleDiff);\n\n            if (normalizedDiff < SAFE_ZONE / 3) {\n                return 'MISS'; // Too close to existing pin\n            }\n        }\n\n        // Timing-based accuracy (simplified - in real game, this would be rhythm-based)\n        const timing = Math.random(); // Replace with actual rhythm timing calculation\n\n        if (timing > 0.8) return 'PERFECT';\n        if (timing > 0.5) return 'GOOD';\n        return 'MISS';\n    }, [pins]);\n\n    // Process hit with full judgment logic\n    const processHit = useCallback((throwAngle: number) => {\n        const hitResult = checkHitDetection(throwAngle);\n\n        // Create visual effect\n        const effect: HitEffect = {\n            id: Date.now(),\n            x: Math.cos((throwAngle * Math.PI) / 180) * TARGET_RADIUS * 0.7,\n            y: Math.sin((throwAngle * Math.PI) / 180) * TARGET_RADIUS * 0.7,\n            type: hitResult,\n            timestamp: Date.now()\n        };\n\n        // Calculate score and update stats\n        const newStats = { ...currentStats };\n\n        if (hitResult === 'PERFECT') {\n            newStats.hits.perfect++;\n            newStats.score += 300 + (currentStats.combo * 5); // Combo bonus\n            newStats.combo++;\n        } else if (hitResult === 'GOOD') {\n            newStats.hits.good++;\n            newStats.score += 100 + (currentStats.combo * 2);\n            newStats.combo++;\n        } else {\n            newStats.hits.miss++;\n            newStats.combo = 0; // Reset combo on miss\n        }\n\n        // Calculate accuracy\n        const totalHits = newStats.hits.perfect + newStats.hits.good + newStats.hits.miss;\n        const accurateHits = newStats.hits.perfect + newStats.hits.good;\n        newStats.accuracy = totalHits > 0 ? Math.round((accurateHits / totalHits) * 100) : 100;\n\n        // Trigger callbacks\n        onHitResult(hitResult, effect);\n        onStatsUpdate(newStats);\n\n        return hitResult;\n    }, [checkHitDetection, onHitResult, onStatsUpdate, currentStats]);\n\n    // Calculate timing window for rhythm games\n    const calculateRhythmTiming = useCallback((currentTime: number, bpm: number): number => {\n        // Simplified rhythm timing - in real implementation, this would sync with audio\n        const beatInterval = (60 / bpm) * 1000; // ms per beat\n        const timeSinceLastBeat = currentTime % beatInterval;\n        const normalizedTiming = timeSinceLastBeat / beatInterval;\n\n        // Perfect timing is close to beat (0 or 1)\n        const distanceFromBeat = Math.min(normalizedTiming, 1 - normalizedTiming);\n        return 1 - (distanceFromBeat * 2); // Convert to 0-1 where 1 is perfect\n    }, []);\n\n    // Check if throw is safe (no collision)\n    const isThrowSafe = useCallback((throwAngle: number): boolean => {\n        for (const pin of pins) {\n            const angleDiff = Math.abs(throwAngle - pin.angle);\n            const normalizedDiff = Math.min(angleDiff, 360 - angleDiff);\n\n            if (normalizedDiff < SAFE_ZONE) {\n                return false;\n            }\n        }\n        return true;\n    }, [pins]);\n\n    // Get difficulty multiplier based on pin count\n    const getDifficultyMultiplier = useCallback((): number => {\n        const pinCount = pins.length;\n        if (pinCount < 5) return 1.0;\n        if (pinCount < 10) return 1.2;\n        if (pinCount < 15) return 1.5;\n        return 2.0;\n    }, [pins.length]);\n\n    // Return judgment functions for use by parent component\n    return {\n        processHit,\n        checkHitDetection,\n        calculateRhythmTiming,\n        isThrowSafe,\n        getDifficultyMultiplier,\n        // Stats helpers\n        getAccuracy: () => currentStats.accuracy,\n        getCombo: () => currentStats.combo,\n        getScore: () => currentStats.score\n    };\n}\n\nexport type { HitJudgmentProps, GameStats };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1078, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/game/ScoreBoard.tsx"],"sourcesContent":["/**\n * ScoreBoard - Dedicated Score and Stats Display Component\n * Single Responsibility: Display score, combo, accuracy, and hit statistics\n */\n\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Star, Target, TrendingUp, Award } from 'lucide-react';\nimport type { GameStats } from './HitJudgment';\n\ninterface ScoreBoardProps {\n    stats: GameStats;\n    currentSong?: {\n        title: string;\n        artist: string;\n        bpm: number;\n        duration: number;\n    };\n    gameInfo?: {\n        rotationSpeed: number;\n        pinCount: number;\n        difficulty: string;\n    };\n}\n\nexport function ScoreBoard({ stats, currentSong, gameInfo }: ScoreBoardProps) {\n    // Format large numbers with commas\n    const formatScore = (score: number): string => {\n        return score.toLocaleString();\n    };\n\n    // Get combo display with color\n    const getComboDisplay = () => {\n        if (stats.combo >= 50) return { text: `${stats.combo}x`, color: 'text-purple-400', bg: 'bg-purple-900/30' };\n        if (stats.combo >= 20) return { text: `${stats.combo}x`, color: 'text-yellow-400', bg: 'bg-yellow-900/30' };\n        if (stats.combo >= 10) return { text: `${stats.combo}x`, color: 'text-blue-400', bg: 'bg-blue-900/30' };\n        return { text: `${stats.combo}x`, color: 'text-white', bg: 'bg-slate-700/30' };\n    };\n\n    // Get accuracy color\n    const getAccuracyColor = () => {\n        if (stats.accuracy >= 95) return 'text-green-400';\n        if (stats.accuracy >= 85) return 'text-yellow-400';\n        if (stats.accuracy >= 70) return 'text-orange-400';\n        return 'text-red-400';\n    };\n\n    // Calculate grade\n    const getGrade = () => {\n        if (stats.accuracy >= 95) return { grade: 'S', color: 'text-yellow-300' };\n        if (stats.accuracy >= 90) return { grade: 'A', color: 'text-green-400' };\n        if (stats.accuracy >= 80) return { grade: 'B', color: 'text-blue-400' };\n        if (stats.accuracy >= 70) return { grade: 'C', color: 'text-purple-400' };\n        return { grade: 'D', color: 'text-red-400' };\n    };\n\n    const combo = getComboDisplay();\n    const grade = getGrade();\n\n    return (\n        <div className=\"space-y-4\">\n            {/* Score Card */}\n            <Card className=\"bg-slate-800/50 border-slate-700\">\n                <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-purple-300 flex items-center\">\n                        <Star className=\"w-5 h-5 mr-2\" />\n                        점수\n                    </CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-3xl font-bold text-white mb-2\">\n                        {formatScore(stats.score)}\n                    </div>\n                    <div className={`text-lg font-bold ${combo.color} ${combo.bg} px-2 py-1 rounded-md inline-block`}>\n                        콤보: {combo.text}\n                    </div>\n                </CardContent>\n            </Card>\n\n            {/* Accuracy & Grade */}\n            <Card className=\"bg-slate-800/50 border-slate-700\">\n                <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-purple-300 flex items-center\">\n                        <Award className=\"w-5 h-5 mr-2\" />\n                        정확도\n                    </CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"flex items-center justify-between mb-2\">\n                        <span className={`text-2xl font-bold ${getAccuracyColor()}`}>\n                            {stats.accuracy}%\n                        </span>\n                        <span className={`text-4xl font-bold ${grade.color}`}>\n                            {grade.grade}\n                        </span>\n                    </div>\n                    <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                        <div\n                            className={`h-2 rounded-full transition-all duration-300 ${stats.accuracy >= 95 ? 'bg-green-500' :\n                                    stats.accuracy >= 85 ? 'bg-yellow-500' :\n                                        stats.accuracy >= 70 ? 'bg-orange-500' : 'bg-red-500'\n                                }`}\n                            style={{ width: `${stats.accuracy}%` }}\n                        />\n                    </div>\n                </CardContent>\n            </Card>\n\n            {/* Hit Statistics */}\n            <Card className=\"bg-slate-800/50 border-slate-700\">\n                <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-purple-300 flex items-center\">\n                        <Target className=\"w-5 h-5 mr-2\" />\n                        판정\n                    </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                        <span className=\"text-green-400 font-medium\">PERFECT</span>\n                        <span className=\"text-white font-bold\">{stats.hits.perfect}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                        <span className=\"text-yellow-400 font-medium\">GOOD</span>\n                        <span className=\"text-white font-bold\">{stats.hits.good}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                        <span className=\"text-red-400 font-medium\">MISS</span>\n                        <span className=\"text-white font-bold\">{stats.hits.miss}</span>\n                    </div>\n                    <div className=\"border-t border-slate-600 pt-2 mt-2\">\n                        <div className=\"flex justify-between items-center font-bold\">\n                            <span className=\"text-purple-300\">총 히트</span>\n                            <span className=\"text-white\">\n                                {stats.hits.perfect + stats.hits.good + stats.hits.miss}\n                            </span>\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n\n            {/* Game Info */}\n            {(currentSong || gameInfo) && (\n                <Card className=\"bg-slate-800/50 border-slate-700\">\n                    <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-lg text-purple-300 flex items-center\">\n                            <TrendingUp className=\"w-5 h-5 mr-2\" />\n                            게임 정보\n                        </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2 text-sm\">\n                        {currentSong && (\n                            <>\n                                <div className=\"flex justify-between\">\n                                    <span className=\"text-slate-400\">BPM</span>\n                                    <span className=\"text-white\">{currentSong.bpm}</span>\n                                </div>\n                            </>\n                        )}\n                        {gameInfo && (\n                            <>\n                                <div className=\"flex justify-between\">\n                                    <span className=\"text-slate-400\">회전 속도</span>\n                                    <span className=\"text-white\">{gameInfo.rotationSpeed.toFixed(1)}</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                    <span className=\"text-slate-400\">핀 개수</span>\n                                    <span className=\"text-white\">{gameInfo.pinCount}</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                    <span className=\"text-slate-400\">난이도</span>\n                                    <span className=\"text-white\">{gameInfo.difficulty}</span>\n                                </div>\n                            </>\n                        )}\n                    </CardContent>\n                </Card>\n            )}\n        </div>\n    );\n}\n\nexport type { ScoreBoardProps };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1619, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n    {\n        variants: {\n            variant: {\n                default:\n                    \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n                destructive:\n                    \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n                outline:\n                    \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n                secondary:\n                    \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n                // Game-specific variants\n                game: \"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground shadow-game hover:shadow-game/80 transform hover:scale-105 transition-all duration-200\",\n                perfect: \"bg-game-perfect text-white shadow-lg hover:bg-game-perfect/90 animate-pulse-game\",\n                great: \"bg-game-great text-white shadow-lg hover:bg-game-great/90\",\n                good: \"bg-game-good text-white shadow-lg hover:bg-game-good/90\",\n                miss: \"bg-game-miss text-white shadow-lg hover:bg-game-miss/90\",\n            },\n            size: {\n                default: \"h-9 px-4 py-2\",\n                sm: \"h-8 rounded-md px-3 text-xs\",\n                lg: \"h-10 rounded-md px-8\",\n                xl: \"h-12 rounded-lg px-10 text-base\",\n                icon: \"h-9 w-9\",\n                // Game-specific sizes\n                game: \"h-12 px-6 py-3 text-base font-semibold\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n)\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n    asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\"\n        return (\n            <Comp\n                className={cn(buttonVariants({ variant, size, className }))}\n                ref={ref}\n                {...props}\n            />\n        )\n    }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,IAAA,0KAAG,EACtB,uOACA;IACI,UAAU;QACN,SAAS;YACL,SACI;YACJ,aACI;YACJ,SACI;YACJ,WACI;YACJ,OAAO;YACP,MAAM;YACN,yBAAyB;YACzB,MAAM;YACN,SAAS;YACT,OAAO;YACP,MAAM;YACN,MAAM;QACV;QACA,MAAM;YACF,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,sBAAsB;YACtB,MAAM;QACV;IACJ;IACA,iBAAiB;QACb,SAAS;QACT,MAAM;IACV;AACJ;AASJ,MAAM,uBAAS,2KAAgB,MAC3B,QAA0D;QAAzD,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO;IACpD,MAAM,OAAO,UAAU,2KAAI,GAAG;IAC9B,qBACI,6LAAC;QACG,WAAW,IAAA,wIAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGrB;;AAEJ,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1696, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/game/GameControls.tsx"],"sourcesContent":["/**\n * GameControls - Dedicated Game Control Interface Component\n * Single Responsibility: Handle all game control interactions and UI\n */\n\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Target, Pause, Play, Square, ArrowLeft, RotateCw, Settings } from 'lucide-react';\n\ninterface GameControlsProps {\n    gameState: 'idle' | 'loading' | 'playing' | 'paused' | 'ended' | 'finished';\n    onPinThrow: () => void;\n    onPause: () => void;\n    onResume: () => void;\n    onStop: () => void;\n    onBack: () => void;\n    disabled?: boolean;\n    showThrowButton?: boolean;\n}\n\nexport function GameControls({\n    gameState,\n    onPinThrow,\n    onPause,\n    onResume,\n    onStop,\n    onBack,\n    disabled = false,\n    showThrowButton = true\n}: GameControlsProps) {\n\n    const getGameStateText = () => {\n        switch (gameState) {\n            case 'idle': return '게임 시작 대기';\n            case 'loading': return '로딩 중...';\n            case 'playing': return '플레이 중';\n            case 'paused': return '일시정지';\n            case 'ended':\n            case 'finished': return '게임 종료';\n            default: return '대기';\n        }\n    };\n\n    const getGameStateColor = () => {\n        switch (gameState) {\n            case 'playing': return 'text-green-400';\n            case 'paused': return 'text-orange-400';\n            case 'ended':\n            case 'finished': return 'text-red-400';\n            case 'loading': return 'text-blue-400';\n            default: return 'text-slate-400';\n        }\n    };\n\n    return (\n        <div className=\"space-y-4\">\n            {/* Game Status */}\n            <div className=\"text-center\">\n                <div className={`text-lg font-medium ${getGameStateColor()}`}>\n                    {getGameStateText()}\n                </div>\n                {gameState === 'playing' && (\n                    <div className=\"text-sm text-slate-400 mt-1\">\n                        스페이스바를 눌러 핀을 던지세요!\n                    </div>\n                )}\n            </div>\n\n            {/* Main Controls */}\n            <div className=\"flex flex-col gap-3\">\n                {/* Primary Action Button */}\n                {showThrowButton && (\n                    <Button\n                        onClick={onPinThrow}\n                        disabled={gameState !== 'playing' || disabled}\n                        className=\"w-full bg-purple-500 hover:bg-purple-600 text-lg px-6 py-4 h-auto\"\n                    >\n                        <Target className=\"w-6 h-6 mr-2\" />\n                        핀 던지기\n                        <div className=\"text-sm opacity-75 ml-2\">(Space)</div>\n                    </Button>\n                )}\n\n                {/* Game State Controls */}\n                <div className=\"flex gap-2\">\n                    {gameState === 'playing' && (\n                        <Button\n                            onClick={onPause}\n                            className=\"flex-1 bg-orange-500 hover:bg-orange-600\"\n                            disabled={disabled}\n                        >\n                            <Pause className=\"w-4 h-4 mr-2\" />\n                            일시정지\n                        </Button>\n                    )}\n\n                    {gameState === 'paused' && (\n                        <Button\n                            onClick={onResume}\n                            className=\"flex-1 bg-green-500 hover:bg-green-600\"\n                            disabled={disabled}\n                        >\n                            <Play className=\"w-4 h-4 mr-2\" />\n                            재개\n                        </Button>\n                    )}\n\n                    <Button\n                        onClick={onStop}\n                        variant=\"destructive\"\n                        className=\"flex-1\"\n                        disabled={gameState === 'idle' || disabled}\n                    >\n                        <Square className=\"w-4 h-4 mr-2\" />\n                        정지\n                    </Button>\n                </div>\n\n                {/* Navigation */}\n                <Button\n                    onClick={onBack}\n                    variant=\"outline\"\n                    className=\"w-full border-slate-600\"\n                    disabled={disabled}\n                >\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    곡 선택으로 돌아가기\n                </Button>\n            </div>\n\n            {/* Keyboard Shortcuts Help */}\n            {gameState === 'playing' && (\n                <div className=\"bg-slate-800/30 rounded-lg p-3 text-sm\">\n                    <div className=\"text-slate-300 font-medium mb-2\">키보드 단축키:</div>\n                    <div className=\"space-y-1 text-slate-400\">\n                        <div className=\"flex justify-between\">\n                            <span>핀 던지기</span>\n                            <code className=\"bg-slate-700 px-2 py-1 rounded\">Space</code>\n                        </div>\n                        <div className=\"flex justify-between\">\n                            <span>일시정지</span>\n                            <code className=\"bg-slate-700 px-2 py-1 rounded\">Esc</code>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport type { GameControlsProps };\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;AAID;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;;;;AAgBO,SAAS,aAAa,KAST;QATS,EACzB,SAAS,EACT,UAAU,EACV,OAAO,EACP,QAAQ,EACR,MAAM,EACN,MAAM,EACN,WAAW,KAAK,EAChB,kBAAkB,IAAI,EACN,GATS;IAWzB,MAAM,mBAAmB;QACrB,OAAQ;YACJ,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAU,OAAO;YACtB,KAAK;YACL,KAAK;gBAAY,OAAO;YACxB;gBAAS,OAAO;QACpB;IACJ;IAEA,MAAM,oBAAoB;QACtB,OAAQ;YACJ,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAU,OAAO;YACtB,KAAK;YACL,KAAK;gBAAY,OAAO;YACxB,KAAK;gBAAW,OAAO;YACvB;gBAAS,OAAO;QACpB;IACJ;IAEA,qBACI,6LAAC;QAAI,WAAU;;0BAEX,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAI,WAAW,AAAC,uBAA0C,OAApB;kCAClC;;;;;;oBAEJ,cAAc,2BACX,6LAAC;wBAAI,WAAU;kCAA8B;;;;;;;;;;;;0BAOrD,6LAAC;gBAAI,WAAU;;oBAEV,iCACG,6LAAC,2JAAM;wBACH,SAAS;wBACT,UAAU,cAAc,aAAa;wBACrC,WAAU;;0CAEV,6LAAC,mNAAM;gCAAC,WAAU;;;;;;4BAAiB;0CAEnC,6LAAC;gCAAI,WAAU;0CAA0B;;;;;;;;;;;;kCAKjD,6LAAC;wBAAI,WAAU;;4BACV,cAAc,2BACX,6LAAC,2JAAM;gCACH,SAAS;gCACT,WAAU;gCACV,UAAU;;kDAEV,6LAAC,gNAAK;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;4BAKzC,cAAc,0BACX,6LAAC,2JAAM;gCACH,SAAS;gCACT,WAAU;gCACV,UAAU;;kDAEV,6LAAC,6MAAI;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAKzC,6LAAC,2JAAM;gCACH,SAAS;gCACT,SAAQ;gCACR,WAAU;gCACV,UAAU,cAAc,UAAU;;kDAElC,6LAAC,mNAAM;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;;kCAM3C,6LAAC,2JAAM;wBACH,SAAS;wBACT,SAAQ;wBACR,WAAU;wBACV,UAAU;;0CAEV,6LAAC,gOAAS;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;YAM7C,cAAc,2BACX,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAI,WAAU;kCAAkC;;;;;;kCACjD,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAI,WAAU;;kDACX,6LAAC;kDAAK;;;;;;kDACN,6LAAC;wCAAK,WAAU;kDAAiC;;;;;;;;;;;;0CAErD,6LAAC;gCAAI,WAAU;;kDACX,6LAAC;kDAAK;;;;;;kDACN,6LAAC;wCAAK,WAAU;kDAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO7E;KAhIgB","debugId":null}},
    {"offset": {"line": 1990, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/app/pin/page.tsx"],"sourcesContent":["/**\n * Pin Mode Game Page - Container Component\n * Single Responsibility: Compose and coordinate single-purpose game components\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useGameState } from '@/hooks/useGameState';\nimport { useRouter } from 'next/navigation';\nimport { AudioEngine } from '@/lib/audio/audio-engine';\n\n// Single Responsibility Components\nimport { GameCanvas, type Pin, type HitEffect } from '@/components/game/GameCanvas';\nimport { HitJudgment, type GameStats } from '@/components/game/HitJudgment';\nimport { ScoreBoard } from '@/components/game/ScoreBoard';\nimport { GameControls } from '@/components/game/GameControls';\n\nexport default function PinGamePage() {\n    const router = useRouter();\n    const {\n        currentSong,\n        gameState,\n        stats,\n        pauseGame,\n        resumeGame,\n        stopGame,\n        updateStats\n    } = useGameState();\n\n    // Audio system\n    const audioEngine = useRef<AudioEngine | null>(null);\n\n    // Game State\n    const [targetRotation, setTargetRotation] = useState(0);\n    const [pins, setPins] = useState<Pin[]>([]);\n    const [rotationSpeed, setRotationSpeed] = useState(2);\n    const [hitEffects, setHitEffects] = useState<HitEffect[]>([]);\n    const [currentPinAngle, setCurrentPinAngle] = useState(0);\n\n    // Initialize audio engine\n    useEffect(() => {\n        audioEngine.current = new AudioEngine();\n        \n        return () => {\n            if (audioEngine.current) {\n                audioEngine.current.stop();\n            }\n        };\n    }, []);\n\n    // Load and play audio when game starts\n    useEffect(() => {\n        async function loadAudio() {\n            if (currentSong && gameState === 'playing' && audioEngine.current) {\n                try {\n                    console.log('🎵 Loading audio:', currentSong.audioFile);\n                    \n                    // Load audio file\n                    if (currentSong.audioFile) {\n                        const response = await fetch(`file://${currentSong.audioFile}`);\n                        const arrayBuffer = await response.arrayBuffer();\n                        \n                        const loaded = await audioEngine.current.loadAudio(arrayBuffer);\n                        if (loaded) {\n                            console.log('🎵 Starting audio playback');\n                            audioEngine.current.play();\n                        }\n                    }\n                } catch (error) {\n                    console.error('❌ Failed to load audio:', error);\n                }\n            }\n        }\n\n        if (gameState === 'playing') {\n            loadAudio();\n        }\n    }, [currentSong, gameState]);\n\n    // Hit Judgment System\n    const handleHitResult = useCallback((result: 'PERFECT' | 'GOOD' | 'MISS', effect: HitEffect) => {\n        // Add visual effect\n        setHitEffects(prev => [...prev, effect]);\n\n        // Add pin if successful hit\n        if (result !== 'MISS') {\n            const newPin: Pin = {\n                id: Date.now(),\n                angle: (targetRotation + currentPinAngle) % 360,\n                timestamp: Date.now(),\n                stuck: true\n            };\n            setPins(prev => [...prev, newPin]);\n\n            // Increase rotation speed based on combo\n            if (stats.combo > 0 && stats.combo % 10 === 0) {\n                setRotationSpeed(prev => Math.min(prev + 0.2, 5));\n            }\n        }\n\n        // Clean up effect after animation\n        setTimeout(() => {\n            setHitEffects(prev => prev.filter(e => e.id !== effect.id));\n        }, 1000);\n    }, [targetRotation, currentPinAngle, stats.combo]);\n\n    // Initialize Hit Judgment System\n    const hitJudgment = HitJudgment({\n        pins,\n        onHitResult: handleHitResult,\n        onStatsUpdate: updateStats,\n        currentStats: stats\n    });\n\n    // Target rotation animation\n    useEffect(() => {\n        if (gameState === 'playing') {\n            const interval = setInterval(() => {\n                setTargetRotation(prev => (prev + rotationSpeed) % 360);\n            }, 16); // ~60fps\n            return () => clearInterval(interval);\n        }\n    }, [gameState, rotationSpeed]);\n\n    // Pin throwing handler\n    const handlePinThrow = useCallback(() => {\n        if (gameState !== 'playing' || !currentSong) return;\n\n        const throwAngle = (targetRotation + currentPinAngle) % 360;\n        hitJudgment.processHit(throwAngle);\n    }, [gameState, currentSong, targetRotation, currentPinAngle, hitJudgment]);\n\n    // Keyboard controls\n    useEffect(() => {\n        const handleKeyPress = (event: KeyboardEvent) => {\n            if (event.code === 'Space') {\n                event.preventDefault();\n                handlePinThrow();\n            } else if (event.code === 'Escape') {\n                event.preventDefault();\n                if (gameState === 'playing') {\n                    pauseGame();\n                } else if (gameState === 'paused') {\n                    resumeGame();\n                }\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyPress);\n        return () => window.removeEventListener('keydown', handleKeyPress);\n    }, [handlePinThrow, gameState, pauseGame, resumeGame]);\n\n    // Navigation handlers\n    const handleBack = useCallback(() => {\n        stopGame();\n        router.push('/select');\n    }, [stopGame, router]);\n\n    const handleStop = useCallback(() => {\n        stopGame();\n        // Reset game state\n        setPins([]);\n        setHitEffects([]);\n        setTargetRotation(0);\n        setRotationSpeed(2);\n    }, [stopGame]);\n\n    // No song selected state\n    if (!currentSong) {\n        return (\n            <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8\">\n                <div className=\"max-w-4xl mx-auto\">\n                    <Card className=\"bg-slate-800/50 border-slate-700\">\n                        <CardContent className=\"p-8 text-center\">\n                            <h2 className=\"text-2xl font-bold text-purple-300 mb-4\">\n                                곡을 선택해주세요\n                            </h2>\n                            <p className=\"text-slate-400 mb-6\">\n                                핀 게임을 시작하려면 먼저 곡을 선택해야 합니다.\n                            </p>\n                            <GameControls\n                                gameState=\"idle\"\n                                onPinThrow={() => { }}\n                                onPause={() => { }}\n                                onResume={() => { }}\n                                onStop={() => { }}\n                                onBack={handleBack}\n                                showThrowButton={false}\n                            />\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4\">\n            <div className=\"max-w-7xl mx-auto\">\n                {/* Header */}\n                <div className=\"mb-6\">\n                    <h1 className=\"text-3xl font-bold text-purple-300 mb-2\">핀 게임</h1>\n                    <p className=\"text-slate-400\">{currentSong.title} - {currentSong.artist}</p>\n                </div>\n\n                {/* Game Layout */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                    {/* Game Canvas Area */}\n                    <div className=\"lg:col-span-3\">\n                        <Card className=\"bg-slate-800/50 border-slate-700\">\n                            <CardContent className=\"p-6\">\n                                <div className=\"relative\">\n                                    <GameCanvas\n                                        targetRotation={targetRotation}\n                                        pins={pins}\n                                        hitEffects={hitEffects}\n                                        currentPinAngle={currentPinAngle}\n                                        gameState={gameState}\n                                        width={600}\n                                        height={600}\n                                    />\n\n                                    {/* Game Status Overlay */}\n                                    {gameState !== 'playing' && (\n                                        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center rounded-lg\">\n                                            <div className=\"text-center\">\n                                                <h3 className=\"text-2xl font-bold text-white mb-4\">\n                                                    {gameState === 'idle' ? '게임 시작 대기' :\n                                                        gameState === 'paused' ? '일시정지' :\n                                                            gameState === 'loading' ? '로딩 중...' : '게임 종료'}\n                                                </h3>\n                                                {gameState === 'paused' && (\n                                                    <p className=\"text-slate-300\">\n                                                        재개하려면 플레이 버튼을 클릭하거나 ESC를 누르세요\n                                                    </p>\n                                                )}\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </div>\n\n                    {/* Controls and Stats Panel */}\n                    <div className=\"space-y-4\">\n                        {/* Game Controls */}\n                        <Card className=\"bg-slate-800/50 border-slate-700\">\n                            <CardContent className=\"p-4\">\n                                <GameControls\n                                    gameState={gameState}\n                                    onPinThrow={handlePinThrow}\n                                    onPause={pauseGame}\n                                    onResume={resumeGame}\n                                    onStop={handleStop}\n                                    onBack={handleBack}\n                                />\n                            </CardContent>\n                        </Card>\n\n                        {/* Score Board */}\n                        <ScoreBoard\n                            stats={stats}\n                            currentSong={currentSong}\n                            gameInfo={{\n                                rotationSpeed,\n                                pinCount: pins.length,\n                                difficulty: hitJudgment.getDifficultyMultiplier() > 1.5 ? 'Hard' :\n                                    hitJudgment.getDifficultyMultiplier() > 1.2 ? 'Normal' : 'Easy'\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;AAID;AACA;AACA;AACA;AACA;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;;;AAZA;;;;;;;;;;AAce,SAAS;;IACpB,MAAM,SAAS,IAAA,kJAAS;IACxB,MAAM,EACF,WAAW,EACX,SAAS,EACT,KAAK,EACL,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACd,GAAG,IAAA,2JAAY;IAEhB,eAAe;IACf,MAAM,cAAc,IAAA,uKAAM,EAAqB;IAE/C,aAAa;IACb,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,yKAAQ,EAAC;IACrD,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAQ,EAAE;IAC1C,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yKAAQ,EAAC;IACnD,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAc,EAAE;IAC5D,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,IAAA,yKAAQ,EAAC;IAEvD,0BAA0B;IAC1B,IAAA,0KAAS;iCAAC;YACN,YAAY,OAAO,GAAG,IAAI,oKAAW;YAErC;yCAAO;oBACH,IAAI,YAAY,OAAO,EAAE;wBACrB,YAAY,OAAO,CAAC,IAAI;oBAC5B;gBACJ;;QACJ;gCAAG,EAAE;IAEL,uCAAuC;IACvC,IAAA,0KAAS;iCAAC;YACN,eAAe;gBACX,IAAI,eAAe,cAAc,aAAa,YAAY,OAAO,EAAE;oBAC/D,IAAI;wBACA,QAAQ,GAAG,CAAC,qBAAqB,YAAY,SAAS;wBAEtD,kBAAkB;wBAClB,IAAI,YAAY,SAAS,EAAE;4BACvB,MAAM,WAAW,MAAM,MAAM,AAAC,UAA+B,OAAtB,YAAY,SAAS;4BAC5D,MAAM,cAAc,MAAM,SAAS,WAAW;4BAE9C,MAAM,SAAS,MAAM,YAAY,OAAO,CAAC,SAAS,CAAC;4BACnD,IAAI,QAAQ;gCACR,QAAQ,GAAG,CAAC;gCACZ,YAAY,OAAO,CAAC,IAAI;4BAC5B;wBACJ;oBACJ,EAAE,OAAO,OAAO;wBACZ,QAAQ,KAAK,CAAC,2BAA2B;oBAC7C;gBACJ;YACJ;YAEA,IAAI,cAAc,WAAW;gBACzB;YACJ;QACJ;gCAAG;QAAC;QAAa;KAAU;IAE3B,sBAAsB;IACtB,MAAM,kBAAkB,IAAA,4KAAW;oDAAC,CAAC,QAAqC;YACtE,oBAAoB;YACpB;4DAAc,CAAA,OAAQ;2BAAI;wBAAM;qBAAO;;YAEvC,4BAA4B;YAC5B,IAAI,WAAW,QAAQ;gBACnB,MAAM,SAAc;oBAChB,IAAI,KAAK,GAAG;oBACZ,OAAO,CAAC,iBAAiB,eAAe,IAAI;oBAC5C,WAAW,KAAK,GAAG;oBACnB,OAAO;gBACX;gBACA;gEAAQ,CAAA,OAAQ;+BAAI;4BAAM;yBAAO;;gBAEjC,yCAAyC;gBACzC,IAAI,MAAM,KAAK,GAAG,KAAK,MAAM,KAAK,GAAG,OAAO,GAAG;oBAC3C;oEAAiB,CAAA,OAAQ,KAAK,GAAG,CAAC,OAAO,KAAK;;gBAClD;YACJ;YAEA,kCAAkC;YAClC;4DAAW;oBACP;oEAAc,CAAA,OAAQ,KAAK,MAAM;4EAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,EAAE;;;gBAC7D;2DAAG;QACP;mDAAG;QAAC;QAAgB;QAAiB,MAAM,KAAK;KAAC;IAEjD,iCAAiC;IACjC,MAAM,cAAc,IAAA,uKAAW,EAAC;QAC5B;QACA,aAAa;QACb,eAAe;QACf,cAAc;IAClB;IAEA,4BAA4B;IAC5B,IAAA,0KAAS;iCAAC;YACN,IAAI,cAAc,WAAW;gBACzB,MAAM,WAAW;sDAAY;wBACzB;8DAAkB,CAAA,OAAQ,CAAC,OAAO,aAAa,IAAI;;oBACvD;qDAAG,KAAK,SAAS;gBACjB;6CAAO,IAAM,cAAc;;YAC/B;QACJ;gCAAG;QAAC;QAAW;KAAc;IAE7B,uBAAuB;IACvB,MAAM,iBAAiB,IAAA,4KAAW;mDAAC;YAC/B,IAAI,cAAc,aAAa,CAAC,aAAa;YAE7C,MAAM,aAAa,CAAC,iBAAiB,eAAe,IAAI;YACxD,YAAY,UAAU,CAAC;QAC3B;kDAAG;QAAC;QAAW;QAAa;QAAgB;QAAiB;KAAY;IAEzE,oBAAoB;IACpB,IAAA,0KAAS;iCAAC;YACN,MAAM;wDAAiB,CAAC;oBACpB,IAAI,MAAM,IAAI,KAAK,SAAS;wBACxB,MAAM,cAAc;wBACpB;oBACJ,OAAO,IAAI,MAAM,IAAI,KAAK,UAAU;wBAChC,MAAM,cAAc;wBACpB,IAAI,cAAc,WAAW;4BACzB;wBACJ,OAAO,IAAI,cAAc,UAAU;4BAC/B;wBACJ;oBACJ;gBACJ;;YAEA,OAAO,gBAAgB,CAAC,WAAW;YACnC;yCAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;;QACvD;gCAAG;QAAC;QAAgB;QAAW;QAAW;KAAW;IAErD,sBAAsB;IACtB,MAAM,aAAa,IAAA,4KAAW;+CAAC;YAC3B;YACA,OAAO,IAAI,CAAC;QAChB;8CAAG;QAAC;QAAU;KAAO;IAErB,MAAM,aAAa,IAAA,4KAAW;+CAAC;YAC3B;YACA,mBAAmB;YACnB,QAAQ,EAAE;YACV,cAAc,EAAE;YAChB,kBAAkB;YAClB,iBAAiB;QACrB;8CAAG;QAAC;KAAS;IAEb,yBAAyB;IACzB,IAAI,CAAC,aAAa;QACd,qBACI,6LAAC;YAAI,WAAU;sBACX,cAAA,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC,uJAAI;oBAAC,WAAU;8BACZ,cAAA,6LAAC,8JAAW;wBAAC,WAAU;;0CACnB,6LAAC;gCAAG,WAAU;0CAA0C;;;;;;0CAGxD,6LAAC;gCAAE,WAAU;0CAAsB;;;;;;0CAGnC,6LAAC,yKAAY;gCACT,WAAU;gCACV,YAAY,KAAQ;gCACpB,SAAS,KAAQ;gCACjB,UAAU,KAAQ;gCAClB,QAAQ,KAAQ;gCAChB,QAAQ;gCACR,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;IAO7C;IAEA,qBACI,6LAAC;QAAI,WAAU;kBACX,cAAA,6LAAC;YAAI,WAAU;;8BAEX,6LAAC;oBAAI,WAAU;;sCACX,6LAAC;4BAAG,WAAU;sCAA0C;;;;;;sCACxD,6LAAC;4BAAE,WAAU;;gCAAkB,YAAY,KAAK;gCAAC;gCAAI,YAAY,MAAM;;;;;;;;;;;;;8BAI3E,6LAAC;oBAAI,WAAU;;sCAEX,6LAAC;4BAAI,WAAU;sCACX,cAAA,6LAAC,uJAAI;gCAAC,WAAU;0CACZ,cAAA,6LAAC,8JAAW;oCAAC,WAAU;8CACnB,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC,qKAAU;gDACP,gBAAgB;gDAChB,MAAM;gDACN,YAAY;gDACZ,iBAAiB;gDACjB,WAAW;gDACX,OAAO;gDACP,QAAQ;;;;;;4CAIX,cAAc,2BACX,6LAAC;gDAAI,WAAU;0DACX,cAAA,6LAAC;oDAAI,WAAU;;sEACX,6LAAC;4DAAG,WAAU;sEACT,cAAc,SAAS,aACpB,cAAc,WAAW,SACrB,cAAc,YAAY,YAAY;;;;;;wDAEjD,cAAc,0BACX,6LAAC;4DAAE,WAAU;sEAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAa9D,6LAAC;4BAAI,WAAU;;8CAEX,6LAAC,uJAAI;oCAAC,WAAU;8CACZ,cAAA,6LAAC,8JAAW;wCAAC,WAAU;kDACnB,cAAA,6LAAC,yKAAY;4CACT,WAAW;4CACX,YAAY;4CACZ,SAAS;4CACT,UAAU;4CACV,QAAQ;4CACR,QAAQ;;;;;;;;;;;;;;;;8CAMpB,6LAAC,qKAAU;oCACP,OAAO;oCACP,aAAa;oCACb,UAAU;wCACN;wCACA,UAAU,KAAK,MAAM;wCACrB,YAAY,YAAY,uBAAuB,KAAK,MAAM,SACtD,YAAY,uBAAuB,KAAK,MAAM,WAAW;oCACjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO5B;GAnQwB;;QACL,kJAAS;QASpB,2JAAY;;;KAVI","debugId":null}}]
}