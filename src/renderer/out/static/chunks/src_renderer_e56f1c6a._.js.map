{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            \"rounded-xl border bg-card text-card-foreground shadow\",\n            className\n        )}\n        {...props}\n    />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n    />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,2KAAgB,MAG3B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QACG,KAAK;QACL,WAAW,IAAA,wIAAE,EACT,yDACA;QAEH,GAAG,KAAK;;;;;;;;AAGjB,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,2KAAgB,OAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;;;AAEvF,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QACG,KAAK;QACL,WAAW,IAAA,wIAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;;AAGjB,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,2KAAgB,OAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAE,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,iCAAiC;QAAa,GAAG,KAAK;;;;;;;;AAErF,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;;;AAElE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,2KAAgB,QAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACtB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,wIAAE,EAAC,8BAA8B;QAAa,GAAG,KAAK;;;;;;;;AAEpF,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/app/play/page.tsx"],"sourcesContent":["/**\n * Play Page - Game Selection and Play Interface\n */\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Play, Target, Music, Clock } from 'lucide-react';\n\ninterface GameMode {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ElementType;\n  difficulty: 'Easy' | 'Medium' | 'Hard';\n  color: string;\n}\n\nconst gameModes: GameMode[] = [\n  {\n    id: 'osu',\n    name: 'osu! Mode',\n    description: 'Classic circle-tapping gameplay with approach circles',\n    icon: Target,\n    difficulty: 'Medium',\n    color: 'from-blue-500 to-cyan-500'\n  },\n  {\n    id: 'pin',\n    name: 'Pin Mode',\n    description: 'Knife Hit style gameplay - throw pins at the spinning target',\n    icon: Target,\n    difficulty: 'Easy',\n    color: 'from-purple-500 to-pink-500'\n  }\n];\n\nexport default function PlayPage() {\n  const [selectedMode, setSelectedMode] = useState<string | null>(null);\n  const [selectedSong, setSelectedSong] = useState<any>(null);\n\n  const handleModeSelect = (modeId: string) => {\n    setSelectedMode(modeId);\n  };\n\n  const startGame = () => {\n    if (selectedMode && selectedSong) {\n      // Navigate to game with selected mode and song\n      console.log(`Starting ${selectedMode} mode with song:`, selectedSong);\n    }\n  };\n\n  return (\n    <div className=\"min-h-full bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-2\">Choose Your Mode</h1>\n          <p className=\"text-slate-400 text-lg\">Select how you want to experience the rhythm</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n          {gameModes.map((mode) => {\n            const Icon = mode.icon;\n            const isSelected = selectedMode === mode.id;\n            \n            return (\n              <Card \n                key={mode.id}\n                className={`cursor-pointer transition-all duration-300 hover:scale-105 ${\n                  isSelected \n                    ? 'bg-slate-800 border-purple-500 shadow-lg shadow-purple-500/25' \n                    : 'bg-slate-800/50 border-slate-700 hover:border-slate-600'\n                }`}\n                onClick={() => handleModeSelect(mode.id)}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center gap-4\">\n                    <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${mode.color} flex items-center justify-center`}>\n                      <Icon className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-white text-xl\">{mode.name}</CardTitle>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <span className={`px-2 py-1 rounded text-xs font-medium ${\n                          mode.difficulty === 'Easy' ? 'bg-green-500/20 text-green-400' :\n                          mode.difficulty === 'Medium' ? 'bg-yellow-500/20 text-yellow-400' :\n                          'bg-red-500/20 text-red-400'\n                        }`}>\n                          {mode.difficulty}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-slate-300 text-base\">\n                    {mode.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {selectedMode && (\n          <Card className=\"bg-slate-800/50 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Music className=\"w-5 h-5\" />\n                Select a Song\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <div className=\"text-slate-400 mb-4\">\n                  <Music className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                  No songs available yet\n                </div>\n                <p className=\"text-slate-500 mb-6\">\n                  Import .osz files from the Library section to start playing\n                </p>\n                <Button \n                  variant=\"outline\" \n                  className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                >\n                  Go to Library\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AAID;AACA;AACA;AACA;AAAA;;;AALA;;;;;AAgBA,MAAM,YAAwB;IAC5B;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,MAAM,mNAAM;QACZ,YAAY;QACZ,OAAO;IACT;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,MAAM,mNAAM;QACZ,YAAY;QACZ,OAAO;IACT;CACD;AAEc,SAAS;;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAgB;IAChE,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAM;IAEtD,MAAM,mBAAmB,CAAC;QACxB,gBAAgB;IAClB;IAEA,MAAM,YAAY;QAChB,IAAI,gBAAgB,cAAc;YAChC,+CAA+C;YAC/C,QAAQ,GAAG,CAAC,AAAC,YAAwB,OAAb,cAAa,qBAAmB;QAC1D;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAqC;;;;;;sCACnD,6LAAC;4BAAE,WAAU;sCAAyB;;;;;;;;;;;;8BAGxC,6LAAC;oBAAI,WAAU;8BACZ,UAAU,GAAG,CAAC,CAAC;wBACd,MAAM,OAAO,KAAK,IAAI;wBACtB,MAAM,aAAa,iBAAiB,KAAK,EAAE;wBAE3C,qBACE,6LAAC,uJAAI;4BAEH,WAAW,AAAC,8DAIX,OAHC,aACI,kEACA;4BAEN,SAAS,IAAM,iBAAiB,KAAK,EAAE;;8CAEvC,6LAAC,6JAAU;8CACT,cAAA,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAW,AAAC,0CAAoD,OAAX,KAAK,KAAK,EAAC;0DACnE,cAAA,6LAAC;oDAAK,WAAU;;;;;;;;;;;0DAElB,6LAAC;;kEACC,6LAAC,4JAAS;wDAAC,WAAU;kEAAsB,KAAK,IAAI;;;;;;kEACpD,6LAAC;wDAAI,WAAU;kEACb,cAAA,6LAAC;4DAAK,WAAW,AAAC,yCAIjB,OAHC,KAAK,UAAU,KAAK,SAAS,mCAC7B,KAAK,UAAU,KAAK,WAAW,qCAC/B;sEAEC,KAAK,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAM1B,6LAAC,8JAAW;8CACV,cAAA,6LAAC,kKAAe;wCAAC,WAAU;kDACxB,KAAK,WAAW;;;;;;;;;;;;2BA7BhB,KAAK,EAAE;;;;;oBAkClB;;;;;;gBAGD,8BACC,6LAAC,uJAAI;oBAAC,WAAU;;sCACd,6LAAC,6JAAU;sCACT,cAAA,6LAAC,4JAAS;gCAAC,WAAU;;kDACnB,6LAAC,gNAAK;wCAAC,WAAU;;;;;;oCAAY;;;;;;;;;;;;sCAIjC,6LAAC,8JAAW;sCACV,cAAA,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,gNAAK;gDAAC,WAAU;;;;;;4CAAsC;;;;;;;kDAGzD,6LAAC;wCAAE,WAAU;kDAAsB;;;;;;kDAGnC,6LAAC,2JAAM;wCACL,SAAQ;wCACR,WAAU;kDACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUjB;GAjGwB;KAAA","debugId":null}}]
}