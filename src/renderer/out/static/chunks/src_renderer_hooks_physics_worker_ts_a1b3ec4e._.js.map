{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/physics.worker.ts"],"sourcesContent":["// src/renderer/hooks/physics.worker.ts\n\nimport { Knife, KnifePosition } from './useKnifePhysics';\n\nlet knives: Knife[] = [];\nlet targetRadius = 0;\nlet velocity = 400;\nlet rotationSpeed = 540;\n\nconst KNIFE_TIP_OFFSET = 32;\nconst STICK_DEPTH = 10;\nconst FLYING_ROTATION_DEG = 0;\nconst STUCK_ROTATION_OFFSET = -90;\nconst TOTAL_FLIGHT_TIME = 0.30;\n\nconst calculateKnifePosition = (knife: Knife): KnifePosition => {\n    const currentTime = Date.now();\n    const elapsed = (currentTime - knife.thrownAt) / 1000;\n\n    if (knife.isStuck) {\n        const targetRotation = (currentTime / 1000 * 120) % 360;\n        const finalAngle = targetRotation + knife.stuckAngle;\n        const angleRad = (finalAngle * Math.PI) / 180;\n        const effectiveRadius = (targetRadius + KNIFE_TIP_OFFSET) - STICK_DEPTH;\n        const x = Math.cos(angleRad) * effectiveRadius;\n        const y = Math.sin(angleRad) * effectiveRadius;\n        const rotation = finalAngle + STUCK_ROTATION_OFFSET;\n        return { x, y, rotation };\n    } else {\n        const startY = 250;\n        const y = startY - (elapsed * velocity);\n        const x = 0;\n        const rotation = FLYING_ROTATION_DEG;\n        return { x, y, rotation };\n    }\n};\n\nconst updatePhysics = () => {\n    const currentTime = Date.now();\n    let hitOccurred = false;\n\n    knives = knives.map(knife => {\n        if (knife.isStuck) return knife;\n\n        const elapsed = (currentTime - knife.thrownAt) / 1000;\n        const startY = 250;\n        const totalDistance = startY - targetRadius;\n        const progress = Math.min(1, elapsed / TOTAL_FLIGHT_TIME);\n        const easedProgress = progress * (2 - progress);\n        const y = startY - (easedProgress * totalDistance);\n\n        if (y <= targetRadius) {\n            const targetRotationNow = (currentTime / 1000 * 120) % 360;\n            const stickPointOnCircle = 90;\n            const newStuckAngle = stickPointOnCircle - targetRotationNow;\n            hitOccurred = true;\n            return { ...knife, isStuck: true, stuckAngle: newStuckAngle };\n        }\n        return knife;\n    }).filter(knife => currentTime - knife.thrownAt < 5000);\n\n    if (hitOccurred) {\n        self.postMessage({ type: 'HIT', hitTime: currentTime / 1000 });\n    }\n\n    self.postMessage({ type: 'UPDATE', payload: { knives: knives.map(k => ({...k, position: calculateKnifePosition(k)})) } });\n};\n\nself.onmessage = (e: MessageEvent) => {\n    const { type, payload } = e.data;\n    console.log('[physics.worker] Received message:', type, payload);\n    switch (type) {\n        case 'INIT':\n            targetRadius = payload.targetRadius;\n            velocity = payload.velocity;\n            rotationSpeed = payload.rotationSpeed;\n            console.log('[physics.worker] Initialized with:', { targetRadius, velocity, rotationSpeed });\n            setInterval(updatePhysics, 1000 / 60);\n            break;\n        case 'THROW':\n            console.log('[physics.worker] Adding knife:', payload.knife);\n            knives.push(payload.knife);\n            break;\n        case 'RESET':\n            console.log('[physics.worker] Resetting knives');\n            knives = [];\n            break;\n    }\n};\n"],"names":[],"mappings":"AAAA,uCAAuC;;AAIvC,IAAI,SAAkB,EAAE;AACxB,IAAI,eAAe;AACnB,IAAI,WAAW;AACf,IAAI,gBAAgB;AAEpB,MAAM,mBAAmB;AACzB,MAAM,cAAc;AACpB,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB,CAAC;AAC/B,MAAM,oBAAoB;AAE1B,MAAM,yBAAyB,CAAC;IAC5B,MAAM,cAAc,KAAK,GAAG;IAC5B,MAAM,UAAU,CAAC,cAAc,MAAM,QAAQ,IAAI;IAEjD,IAAI,MAAM,OAAO,EAAE;QACf,MAAM,iBAAiB,AAAC,cAAc,OAAO,MAAO;QACpD,MAAM,aAAa,iBAAiB,MAAM,UAAU;QACpD,MAAM,WAAW,AAAC,aAAa,KAAK,EAAE,GAAI;QAC1C,MAAM,kBAAkB,AAAC,eAAe,mBAAoB;QAC5D,MAAM,IAAI,KAAK,GAAG,CAAC,YAAY;QAC/B,MAAM,IAAI,KAAK,GAAG,CAAC,YAAY;QAC/B,MAAM,WAAW,aAAa;QAC9B,OAAO;YAAE;YAAG;YAAG;QAAS;IAC5B,OAAO;QACH,MAAM,SAAS;QACf,MAAM,IAAI,SAAU,UAAU;QAC9B,MAAM,IAAI;QACV,MAAM,WAAW;QACjB,OAAO;YAAE;YAAG;YAAG;QAAS;IAC5B;AACJ;AAEA,MAAM,gBAAgB;IAClB,MAAM,cAAc,KAAK,GAAG;IAC5B,IAAI,cAAc;IAElB,SAAS,OAAO,GAAG,CAAC,CAAA;QAChB,IAAI,MAAM,OAAO,EAAE,OAAO;QAE1B,MAAM,UAAU,CAAC,cAAc,MAAM,QAAQ,IAAI;QACjD,MAAM,SAAS;QACf,MAAM,gBAAgB,SAAS;QAC/B,MAAM,WAAW,KAAK,GAAG,CAAC,GAAG,UAAU;QACvC,MAAM,gBAAgB,WAAW,CAAC,IAAI,QAAQ;QAC9C,MAAM,IAAI,SAAU,gBAAgB;QAEpC,IAAI,KAAK,cAAc;YACnB,MAAM,oBAAoB,AAAC,cAAc,OAAO,MAAO;YACvD,MAAM,qBAAqB;YAC3B,MAAM,gBAAgB,qBAAqB;YAC3C,cAAc;YACd,OAAO;gBAAE,GAAG,KAAK;gBAAE,SAAS;gBAAM,YAAY;YAAc;QAChE;QACA,OAAO;IACX,GAAG,MAAM,CAAC,CAAA,QAAS,cAAc,MAAM,QAAQ,GAAG;IAElD,IAAI,aAAa;QACb,KAAK,WAAW,CAAC;YAAE,MAAM;YAAO,SAAS,cAAc;QAAK;IAChE;IAEA,KAAK,WAAW,CAAC;QAAE,MAAM;QAAU,SAAS;YAAE,QAAQ,OAAO,GAAG,CAAC,CAAA,IAAK,CAAC;oBAAC,GAAG,CAAC;oBAAE,UAAU,uBAAuB;gBAAE,CAAC;QAAG;IAAE;AAC3H;AAEA,KAAK,SAAS,GAAG,CAAC;IACd,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI;IAChC,QAAQ,GAAG,CAAC,sCAAsC,MAAM;IACxD,OAAQ;QACJ,KAAK;YACD,eAAe,QAAQ,YAAY;YACnC,WAAW,QAAQ,QAAQ;YAC3B,gBAAgB,QAAQ,aAAa;YACrC,QAAQ,GAAG,CAAC,sCAAsC;gBAAE;gBAAc;gBAAU;YAAc;YAC1F,YAAY,eAAe,OAAO;YAClC;QACJ,KAAK;YACD,QAAQ,GAAG,CAAC,kCAAkC,QAAQ,KAAK;YAC3D,OAAO,IAAI,CAAC,QAAQ,KAAK;YACzB;QACJ,KAAK;YACD,QAAQ,GAAG,CAAC;YACZ,SAAS,EAAE;YACX;IACR;AACJ","debugId":null}}]
}