{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/prg/src/renderer/hooks/physics.worker.ts"],"sourcesContent":["// src/renderer/hooks/physics.worker.ts\n\nimport { Knife, KnifePosition } from './useKnifePhysics';\n\nlet knives: Knife[] = [];\nlet targetRadius = 0;\nlet velocity = 400;\nlet rotationSpeed = 540;\n\n// Active notes for timing judgment (will be set from main thread)\nlet activeNotes: Array<{ time: number, noteId: string }> = [];\nlet currentGameTime = 0; // Current game time from audio service (milliseconds)\n\nconst KNIFE_TIP_OFFSET = 32;\nconst STICK_DEPTH = 10;\nconst FLYING_ROTATION_DEG = 0;\nconst STUCK_ROTATION_OFFSET = -90;\nconst TOTAL_FLIGHT_TIME = 0.30;\n\n// Judgment timing windows (in milliseconds) - can be updated dynamically\nlet JUDGMENT_WINDOWS = {\n    KOOL: 50,   // ±50ms = Perfect hit\n    COOL: 100,  // ±100ms = Great hit  \n    GOOD: 150,  // ±150ms = Good hit\n    MISS: 200   // ±200ms = Miss (beyond this is automatic miss)\n};\n\n// Calculate what judgment should be given based on timing error\nconst getJudgment = (timingError: number): 'KOOL' | 'COOL' | 'GOOD' | 'MISS' => {\n    const absError = Math.abs(timingError);\n    if (absError <= JUDGMENT_WINDOWS.KOOL) return 'KOOL';\n    if (absError <= JUDGMENT_WINDOWS.COOL) return 'COOL';\n    if (absError <= JUDGMENT_WINDOWS.GOOD) return 'GOOD';\n    return 'MISS';\n};\n\n// Find the closest note to current time for judgment\nconst findClosestNote = (gameTimeMs: number): { note: any, timingError: number } | null => {\n    if (activeNotes.length === 0) return null;\n\n    let closestNote = null;\n    let smallestError = Infinity;\n\n    for (const note of activeNotes) {\n        const timingError = gameTimeMs - note.time;\n        const absError = Math.abs(timingError);\n\n        // Only consider notes within miss window\n        if (absError <= JUDGMENT_WINDOWS.MISS && absError < smallestError) {\n            smallestError = absError;\n            closestNote = { note, timingError };\n        }\n    }\n\n    return closestNote;\n};\n\nconst calculateKnifePosition = (knife: Knife): KnifePosition => {\n    const currentTime = Date.now();\n    const elapsed = (currentTime - knife.thrownAt) / 1000;\n\n    if (knife.isStuck) {\n        const targetRotation = (currentTime / 1000 * 120) % 360;\n        const finalAngle = targetRotation + knife.stuckAngle;\n        const angleRad = (finalAngle * Math.PI) / 180;\n        const effectiveRadius = (targetRadius + KNIFE_TIP_OFFSET) - STICK_DEPTH;\n        const x = Math.cos(angleRad) * effectiveRadius;\n        const y = Math.sin(angleRad) * effectiveRadius;\n        const rotation = finalAngle + STUCK_ROTATION_OFFSET;\n        return { x, y, rotation };\n    } else {\n        const startY = 250;\n        const y = startY - (elapsed * velocity);\n        const x = 0;\n        const rotation = FLYING_ROTATION_DEG;\n        return { x, y, rotation };\n    }\n};\n\nconst updatePhysics = () => {\n    const currentTime = Date.now();\n    let hitOccurred = false;\n    let hitDetails = null;\n\n    knives = knives.map(knife => {\n        if (knife.isStuck) return knife;\n\n        const elapsed = (currentTime - knife.thrownAt) / 1000;\n        const startY = 250;\n        const totalDistance = startY - targetRadius;\n        const progress = Math.min(1, elapsed / TOTAL_FLIGHT_TIME);\n        const easedProgress = progress * (2 - progress);\n        const y = startY - (easedProgress * totalDistance);\n\n        // Check if knife hits target\n        if (y <= targetRadius) {\n            const targetRotationNow = (currentTime / 1000 * 120) % 360;\n            const stickPointOnCircle = 90;\n            const newStuckAngle = stickPointOnCircle - targetRotationNow;\n\n            // Calculate judgment based on timing using game time instead of system time\n            const closestNoteData = findClosestNote(currentGameTime);\n\n            if (closestNoteData) {\n                const judgment = getJudgment(closestNoteData.timingError);\n                hitDetails = {\n                    hitTime: currentGameTime / 1000,\n                    timingError: closestNoteData.timingError,\n                    judgment,\n                    noteId: closestNoteData.note.noteId,\n                    accuracy: Math.max(0, 100 - (Math.abs(closestNoteData.timingError) / JUDGMENT_WINDOWS.MISS) * 100)\n                };\n\n                console.log(`[physics.worker] Hit judgment: ${judgment}, timing error: ${closestNoteData.timingError}ms, game time: ${currentGameTime}ms, accuracy: ${hitDetails.accuracy.toFixed(1)}%`);\n            } else {\n                // No note to hit - still register as miss\n                hitDetails = {\n                    hitTime: currentGameTime / 1000,\n                    timingError: 999,\n                    judgment: 'MISS' as const,\n                    noteId: null,\n                    accuracy: 0\n                };\n                console.log('[physics.worker] Hit but no note available - MISS, game time:', currentGameTime);\n            }\n\n            hitOccurred = true;\n            return { ...knife, isStuck: true, stuckAngle: newStuckAngle };\n        }\n        return knife;\n    }).filter(knife => currentTime - knife.thrownAt < 5000);\n\n    if (hitOccurred && hitDetails) {\n        self.postMessage({ type: 'HIT', payload: hitDetails });\n    }\n\n    // Update knife positions\n    const updatedKnives = knives.map(k => ({ ...k, position: calculateKnifePosition(k) }));\n    self.postMessage({ type: 'UPDATE', payload: { knives: updatedKnives } });\n};\n\nself.onmessage = (e: MessageEvent) => {\n    const { type, payload } = e.data;\n    console.log('[physics.worker] Received message:', type, payload);\n    switch (type) {\n        case 'INIT':\n            targetRadius = payload.targetRadius;\n            velocity = payload.velocity;\n            rotationSpeed = payload.rotationSpeed;\n            console.log('[physics.worker] Initialized with:', { targetRadius, velocity, rotationSpeed });\n            setInterval(updatePhysics, 1000 / 60);\n            break;\n        case 'THROW':\n            console.log('[physics.worker] Adding knife:', payload.knife);\n            knives.push(payload.knife);\n            break;\n        case 'SET_NOTES':\n            console.log('[physics.worker] Setting active notes:', payload.notes.length);\n            activeNotes = payload.notes.map((note: any, index: number) => ({\n                time: note.time,\n                noteId: `note-${index}-${note.time}`\n            }));\n            break;\n        case 'SET_JUDGMENT_WINDOWS':\n            console.log('[physics.worker] Setting judgment windows:', payload.windows);\n            JUDGMENT_WINDOWS = { ...payload.windows };\n            break;\n        case 'UPDATE_GAME_TIME':\n            currentGameTime = payload.gameTime;\n            break;\n        case 'RESET':\n            console.log('[physics.worker] Resetting knives and notes');\n            knives = [];\n            activeNotes = [];\n            currentGameTime = 0;\n            break;\n    }\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}